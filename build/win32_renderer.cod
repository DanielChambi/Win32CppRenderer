; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29910.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GlobalRunning@@3_NA				; GlobalRunning
PUBLIC	?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A	; GlobalBackbuffer
_BSS	SEGMENT
?GlobalRunning@@3_NA DB 01H DUP (?)			; GlobalRunning
	ALIGN	4

?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackbuffer
_BSS	ENDS
CONST	SEGMENT
$SG119274 DB	'WM_ACTIVATE', 0aH, 00H
	ORG $+3
$SG119352 DB	'RendererWindowClass', 00H
	ORG $+4
$SG119355 DB	'Renderer', 00H
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	fabsf
PUBLIC	?abs@@YAMM@Z					; abs
PUBLIC	WinMain
PUBLIC	??0?$Vec3@M@@QEAA@XZ				; Vec3<float>::Vec3<float>
PUBLIC	??0?$Vec3@M@@QEAA@MMM@Z				; Vec3<float>::Vec3<float>
PUBLIC	?CrossProduct@?$Vec3@M@@QEAA?AV1@AEAV1@@Z	; Vec3<float>::CrossProduct
PUBLIC	??0?$Matrix44@M@@QEAA@XZ			; Matrix44<float>::Matrix44<float>
PUBLIC	??0?$Matrix44@M@@QEAA@MMMMMMMMMMMMMMMM@Z	; Matrix44<float>::Matrix44<float>
PUBLIC	??A?$Matrix44@M@@QEAAPEAME@Z			; Matrix44<float>::operator[]
PUBLIC	?Inverse@?$Matrix44@M@@QEAA?AV1@XZ		; Matrix44<float>::Inverse
PUBLIC	??0render_camera@@QEAA@XZ			; render_camera::render_camera
PUBLIC	?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z ; DrawLineSegment
PUBLIC	??0?$Vec2@H@@QEAA@XZ				; Vec2<int>::Vec2<int>
PUBLIC	??$max@H@std@@YAAEBHAEBH0@Z			; std::max<int>
PUBLIC	??$min@H@std@@YAAEBHAEBH0@Z			; std::min<int>
PUBLIC	??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z ; std::swap<Vec2<int>,0>
PUBLIC	?RenderTriangle@@YAXUwin32_offscreen_buffer@@Urender_camera@@V?$Vec3@M@@22HH@Z ; RenderTriangle
PUBLIC	?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z ; ProjectPoint
PUBLIC	??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z ; Matrix44<float>::MultPointMatrix<float>
PUBLIC	??0?$Vec2@M@@QEAA@XZ				; Vec2<float>::Vec2<float>
PUBLIC	?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
PUBLIC	?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
PUBLIC	??$move@AEAV?$Vec2@H@@@std@@YA$$QEAV?$Vec2@H@@AEAV1@@Z ; std::move<Vec2<int> &>
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40a00000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41800000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	fabs:PROC
EXTRN	cosf:PROC
EXTRN	sinf:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fabsf DD	imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fabsf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?abs@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?abs@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN18
	DD	imagerel $LN18+3377
	DD	imagerel $unwind$WinMain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CrossProduct@?$Vec3@M@@QEAA?AV1@AEAV1@@Z DD imagerel $LN3
	DD	imagerel $LN3+188
	DD	imagerel $unwind$?CrossProduct@?$Vec3@M@@QEAA?AV1@AEAV1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Inverse@?$Matrix44@M@@QEAA?AV1@XZ DD imagerel $LN35
	DD	imagerel $LN35+1242
	DD	imagerel $unwind$?Inverse@?$Matrix44@M@@QEAA?AV1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0render_camera@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??0render_camera@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?CleanBuffer@@YAXUwin32_offscreen_buffer@@@Z DD imagerel ?CleanBuffer@@YAXUwin32_offscreen_buffer@@@Z
	DD	imagerel ?CleanBuffer@@YAXUwin32_offscreen_buffer@@@Z+154
	DD	imagerel $unwind$?CleanBuffer@@YAXUwin32_offscreen_buffer@@@Z
$pdata$?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z DD imagerel $LN10
	DD	imagerel $LN10+273
	DD	imagerel $unwind$?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z
$pdata$?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z DD imagerel ?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z
	DD	imagerel ?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z+1014
	DD	imagerel $unwind$?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@H@std@@YAAEBHAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$??$max@H@std@@YAAEBHAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@H@std@@YAAEBHAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$??$min@H@std@@YAAEBHAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?RenderTriangle@@YAXUwin32_offscreen_buffer@@Urender_camera@@V?$Vec3@M@@22HH@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?RenderTriangle@@YAXUwin32_offscreen_buffer@@Urender_camera@@V?$Vec3@M@@22HH@Z
$pdata$?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+355
	DD	imagerel $unwind$?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+801
	DD	imagerel $unwind$??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+255
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z+168
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN10
	DD	imagerel $LN10+408
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z DD 011301H
	DD	02213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@H@std@@YAAEBHAEBH0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@H@std@@YAAEBHAEBH0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0render_camera@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Inverse@?$Matrix44@M@@QEAA?AV1@XZ DD 042519H
	DD	0230113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CrossProduct@?$Vec3@M@@QEAA?AV1@AEAV1@@Z DD 011301H
	DD	06213H
xdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 042f19H
	DD	0fb011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	07c0H
$unwind$?CleanBuffer@@YAXUwin32_offscreen_buffer@@@Z DD 010901H
	DD	04209H
$unwind$?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z DD 011701H
	DD	04217H
$unwind$?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z DD 041801H
	DD	02d0118H
	DD	060107011H
$unwind$?RenderTriangle@@YAXUwin32_offscreen_buffer@@Urender_camera@@V?$Vec3@M@@22HH@Z DD 011801H
	DD	06218H
$unwind$?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z DD 011801H
	DD	0a218H
$unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z DD 021a01H
	DD	011011aH
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 042e19H
	DD	023011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?abs@@YAMM@Z DD 010a01H
	DD	0420aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fabsf DD 010a01H
	DD	0420aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\type_traits
;	COMDAT ??$move@AEAV?$Vec2@H@@@std@@YA$$QEAV?$Vec2@H@@AEAV1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAV?$Vec2@H@@@std@@YA$$QEAV?$Vec2@H@@AEAV1@@Z PROC ; std::move<Vec2<int> &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1457 : }

  0000a	c3		 ret	 0
??$move@AEAV?$Vec2@H@@@std@@YA$$QEAV?$Vec2@H@@AEAV1@@Z ENDP ; std::move<Vec2<int> &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
tv64 = 32
Dimension$1 = 40
Result$ = 48
X$2 = 56
Y$3 = 60
Height$4 = 64
Width$5 = 68
$T6 = 72
DeviceContext$7 = 80
$T8 = 96
Paint$9 = 176
__$ArrayPad$ = 256
Window$ = 304
Message$ = 312
WParam$ = 320
LParam$ = 328
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 331  : {

$LN10:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 332  :     LRESULT Result = 0;

  0002e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 333  : 
; 334  :     switch(Message)

  00037	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003e	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00042	83 7c 24 20 02	 cmp	 DWORD PTR tv64[rsp], 2
  00047	74 1a		 je	 SHORT $LN4@Win32MainW
  00049	83 7c 24 20 06	 cmp	 DWORD PTR tv64[rsp], 6
  0004e	74 2b		 je	 SHORT $LN6@Win32MainW
  00050	83 7c 24 20 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00055	74 36		 je	 SHORT $LN7@Win32MainW
  00057	83 7c 24 20 10	 cmp	 DWORD PTR tv64[rsp], 16
  0005c	74 11		 je	 SHORT $LN5@Win32MainW
  0005e	e9 ec 00 00 00	 jmp	 $LN8@Win32MainW
$LN4@Win32MainW:

; 335  :     {
; 336  :         //We define behaivour for messages we specifically want control over
; 337  :         case WM_DESTROY:
; 338  :         {
; 339  :             //TODO: Hanndle as error?
; 340  :             GlobalRunning = false;

  00063	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0 ; GlobalRunning

; 341  :         }break;

  0006a	e9 0a 01 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 342  : 
; 343  :         case WM_CLOSE:
; 344  :         {
; 345  :             GlobalRunning = false;

  0006f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0 ; GlobalRunning

; 346  :         }break;

  00076	e9 fe 00 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 347  : 
; 348  :         case WM_ACTIVATE:
; 349  :         {
; 350  :             OutputDebugString("WM_ACTIVATE\n");

  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG119274
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 351  :         }break;

  00088	e9 ec 00 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 352  : 
; 353  :         //Windows requires behaivour for WM_PAINT on certain occasions
; 354  :         //Necessary to have BeginPaint and EndPaint if not handled with default proc
; 355  :         case WM_PAINT:
; 356  :         {
; 357  :             PAINTSTRUCT Paint;
; 358  :             HDC DeviceContext = BeginPaint(Window, &Paint); 

  0008d	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR Paint$9[rsp]
  00095	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  000a3	48 89 44 24 50	 mov	 QWORD PTR DeviceContext$7[rsp], rax

; 359  :             
; 360  :             int X = Paint.rcPaint.left;

  000a8	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+12]
  000af	89 44 24 38	 mov	 DWORD PTR X$2[rsp], eax

; 361  :             int Y = Paint.rcPaint.top;

  000b3	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+16]
  000ba	89 44 24 3c	 mov	 DWORD PTR Y$3[rsp], eax

; 362  :             int Height = Paint.rcPaint.bottom - Paint.rcPaint.top; 

  000be	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+16]
  000c5	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR Paint$9[rsp+24]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 40	 mov	 DWORD PTR Height$4[rsp], eax

; 363  :             int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  000d4	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+12]
  000db	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR Paint$9[rsp+20]
  000e2	2b c8		 sub	 ecx, eax
  000e4	8b c1		 mov	 eax, ecx
  000e6	89 44 24 44	 mov	 DWORD PTR Width$5[rsp], eax

; 364  :             
; 365  :             
; 366  :             win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  000ea	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  000f2	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  000f7	48 89 44 24 48	 mov	 QWORD PTR $T6[rsp], rax
  000fc	48 8b 44 24 48	 mov	 rax, QWORD PTR $T6[rsp]
  00101	48 89 44 24 28	 mov	 QWORD PTR Dimension$1[rsp], rax

; 367  : 
; 368  :             Win32DisplayBufferInWindow(DeviceContext, Dimension.Width, Dimension.Height, 

  00106	48 8d 44 24 60	 lea	 rax, QWORD PTR $T8[rsp]
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A ; GlobalBackbuffer
  00112	48 8b f8	 mov	 rdi, rax
  00115	48 8b f1	 mov	 rsi, rcx
  00118	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0011d	f3 a4		 rep movsb
  0011f	4c 8d 4c 24 60	 lea	 r9, QWORD PTR $T8[rsp]
  00124	44 8b 44 24 2c	 mov	 r8d, DWORD PTR Dimension$1[rsp+4]
  00129	8b 54 24 28	 mov	 edx, DWORD PTR Dimension$1[rsp]
  0012d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR DeviceContext$7[rsp]
  00132	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z ; Win32DisplayBufferInWindow

; 369  :                                         GlobalBackbuffer);
; 370  : 
; 371  :             EndPaint(Window, &Paint);

  00137	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR Paint$9[rsp]
  0013f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 372  :         }break;

  0014d	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN8@Win32MainW:

; 373  : 
; 374  :         default:
; 375  :         {
; 376  :             //Use default proc to handle message
; 377  :             Result = DefWindowProc(Window, Message, WParam, LParam);

  0014f	4c 8b 8c 24 48
	01 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  00157	4c 8b 84 24 40
	01 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  0015f	8b 94 24 38 01
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00166	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  00174	48 89 44 24 30	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 378  :         }break;
; 379  :     }
; 380  : 
; 381  :     return Result;

  00179	48 8b 44 24 30	 mov	 rax, QWORD PTR Result$[rsp]

; 382  : }

  0017e	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00186	48 33 cc	 xor	 rcx, rsp
  00189	e8 00 00 00 00	 call	 __security_check_cookie
  0018e	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00195	5f		 pop	 rdi
  00196	5e		 pop	 rsi
  00197	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
res$ = 112
DeviceContext$ = 144
WindowWidth$ = 152
WindowHeight$ = 160
Buffer$ = 168
?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z PROC ; Win32DisplayBufferInWindow

; 313  : {    

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 314  :     //TODO: aspect ratio correction
; 315  :     int res = StretchDIBits(DeviceContext,

  0001a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  00022	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  0002a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00032	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00037	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00043	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00048	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  00050	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00053	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00057	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005f	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00062	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00066	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00076	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00081	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR WindowWidth$[rsp]
  00089	45 33 c0	 xor	 r8d, r8d
  0008c	33 d2		 xor	 edx, edx
  0008e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits
  0009c	89 44 24 70	 mov	 DWORD PTR res$[rsp], eax

; 316  :                     0, 0, WindowWidth, WindowHeight,        //Destination Rectangle
; 317  :                     0, 0, Buffer.Width, Buffer.Height,      //Source Rectangle
; 318  :                     Buffer.Memory,
; 319  :                     &Buffer.Info,
; 320  :                     DIB_RGB_COLORS, SRCCOPY);
; 321  :     
; 322  : }

  000a0	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000a7	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
BytesPerPixel$ = 32
BitmapMemorySize$ = 36
Buffer$ = 64
Width$ = 72
Height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 277  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 278  :     if(Buffer->Memory)

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 279  :     {
; 280  :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 281  :     }
; 282  : 
; 283  :     Buffer->Width = Width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 284  :     Buffer->Height = Height;

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR Height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 285  : 
; 286  :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00052	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 287  :     Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00062	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00065	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 288  :     //Negative height is interpreted as origin being in top-left
; 289  :     Buffer->Info.bmiHeader.biHeight = -Buffer->Height;

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0006d	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00070	f7 d8		 neg	 eax
  00072	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00077	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 290  :     Buffer->Info.bmiHeader.biPlanes = 1;

  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00084	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 291  :     Buffer->Info.bmiHeader.biBitCount = 32;

  00088	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00092	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 292  :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0009b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 293  : 
; 294  :     //Altough RGB only needs 3 bytes to store, in order to keep aligned
; 295  :     //With 32 bit words we add a byte for padding 
; 296  :     int BytesPerPixel = 4;      

  000a2	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR BytesPerPixel$[rsp], 4

; 297  :     int BitmapMemorySize = (Buffer->Width*Buffer->Height) * BytesPerPixel;

  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000af	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b4	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000b7	0f af 41 3c	 imul	 eax, DWORD PTR [rcx+60]
  000bb	0f af 44 24 20	 imul	 eax, DWORD PTR BytesPerPixel$[rsp]
  000c0	89 44 24 24	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 298  : 
; 299  :     GlobalBackbuffer.Pitch = GlobalBackbuffer.Width*BytesPerPixel;

  000c4	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+56
  000ca	0f af 44 24 20	 imul	 eax, DWORD PTR BytesPerPixel$[rsp]
  000cf	89 05 40 00 00
	00		 mov	 DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+64, eax

; 300  : 
; 301  :     //Using VirtualAlloc instead of HeapAlloc to allocate memory
; 302  :     //To have our own page and have more freedom to 
; 303  :     //Do memory allocation ourselves
; 304  :     Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_COMMIT, PAGE_READWRITE);

  000d5	48 63 44 24 24	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000da	41 b9 04 00 00
	00		 mov	 r9d, 4
  000e0	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  000e6	48 8b d0	 mov	 rdx, rax
  000e9	33 c9		 xor	 ecx, ecx
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000f1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000f6	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 305  : 
; 306  :     //TODO: Probably clear bitmap to black
; 307  : }

  000fa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fe	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
Result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimension

; 263  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 264  :     win32_window_dimension Result;
; 265  : 
; 266  :     RECT ClientRect;
; 267  :     GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 268  :     Result.Height = ClientRect.bottom - ClientRect.top; 

  00028	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0002c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 24	 mov	 DWORD PTR Result$[rsp+4], eax

; 269  :     Result.Width = ClientRect.right - ClientRect.left;

  00038	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0003c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 270  : 
; 271  :     return Result;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 272  : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimension
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ??0?$Vec2@M@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$Vec2@M@@QEAA@XZ PROC				; Vec2<float>::Vec2<float>, COMDAT

; 13   :     Vec2() : x(0), y(0) {};

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  0001e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00023	c3		 ret	 0
??0?$Vec2@M@@QEAA@XZ ENDP				; Vec2<float>::Vec2<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z
_TEXT	SEGMENT
w$ = 0
a$ = 4
b$ = 8
c$ = 12
this$ = 32
src$ = 40
dst$ = 48
??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z PROC ; Matrix44<float>::MultPointMatrix<float>, COMDAT

; 280  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 281  :         T a, b, c, w;
; 282  : 
; 283  :         //In point multiplication the fourth column of the matrix is the translation vector
; 284  :         a = src.x * x[0][0] + src.y * x[1][0] + src.z * x[2][0] + x[3][0];

  00013	b8 10 00 00 00	 mov	 eax, 16
  00018	48 6b c0 00	 imul	 rax, rax, 0
  0001c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00021	48 03 c8	 add	 rcx, rax
  00024	48 8b c1	 mov	 rax, rcx
  00027	b9 04 00 00 00	 mov	 ecx, 4
  0002c	48 6b c9 00	 imul	 rcx, rcx, 0
  00030	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  00035	f3 0f 10 02	 movss	 xmm0, DWORD PTR [rdx]
  00039	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [rax+rcx]
  0003e	b8 10 00 00 00	 mov	 eax, 16
  00043	48 6b c0 01	 imul	 rax, rax, 1
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	48 03 c8	 add	 rcx, rax
  0004f	48 8b c1	 mov	 rax, rcx
  00052	b9 04 00 00 00	 mov	 ecx, 4
  00057	48 6b c9 00	 imul	 rcx, rcx, 0
  0005b	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  00060	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [rdx+4]
  00065	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [rax+rcx]
  0006a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0006e	b8 10 00 00 00	 mov	 eax, 16
  00073	48 6b c0 02	 imul	 rax, rax, 2
  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	48 03 c8	 add	 rcx, rax
  0007f	48 8b c1	 mov	 rax, rcx
  00082	b9 04 00 00 00	 mov	 ecx, 4
  00087	48 6b c9 00	 imul	 rcx, rcx, 0
  0008b	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  00090	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [rdx+8]
  00095	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [rax+rcx]
  0009a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0009e	b8 10 00 00 00	 mov	 eax, 16
  000a3	48 6b c0 03	 imul	 rax, rax, 3
  000a7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	b9 04 00 00 00	 mov	 ecx, 4
  000b7	48 6b c9 00	 imul	 rcx, rcx, 0
  000bb	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [rax+rcx]
  000c0	f3 0f 11 44 24
	04		 movss	 DWORD PTR a$[rsp], xmm0

; 285  :         b = src.x * x[0][1] + src.y * x[1][1] + src.z * x[2][1] + x[3][1];

  000c6	b8 10 00 00 00	 mov	 eax, 16
  000cb	48 6b c0 00	 imul	 rax, rax, 0
  000cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  000d4	48 03 c8	 add	 rcx, rax
  000d7	48 8b c1	 mov	 rax, rcx
  000da	b9 04 00 00 00	 mov	 ecx, 4
  000df	48 6b c9 01	 imul	 rcx, rcx, 1
  000e3	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  000e8	f3 0f 10 02	 movss	 xmm0, DWORD PTR [rdx]
  000ec	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [rax+rcx]
  000f1	b8 10 00 00 00	 mov	 eax, 16
  000f6	48 6b c0 01	 imul	 rax, rax, 1
  000fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  000ff	48 03 c8	 add	 rcx, rax
  00102	48 8b c1	 mov	 rax, rcx
  00105	b9 04 00 00 00	 mov	 ecx, 4
  0010a	48 6b c9 01	 imul	 rcx, rcx, 1
  0010e	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  00113	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [rdx+4]
  00118	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [rax+rcx]
  0011d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00121	b8 10 00 00 00	 mov	 eax, 16
  00126	48 6b c0 02	 imul	 rax, rax, 2
  0012a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0012f	48 03 c8	 add	 rcx, rax
  00132	48 8b c1	 mov	 rax, rcx
  00135	b9 04 00 00 00	 mov	 ecx, 4
  0013a	48 6b c9 01	 imul	 rcx, rcx, 1
  0013e	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  00143	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [rdx+8]
  00148	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [rax+rcx]
  0014d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00151	b8 10 00 00 00	 mov	 eax, 16
  00156	48 6b c0 03	 imul	 rax, rax, 3
  0015a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0015f	48 03 c8	 add	 rcx, rax
  00162	48 8b c1	 mov	 rax, rcx
  00165	b9 04 00 00 00	 mov	 ecx, 4
  0016a	48 6b c9 01	 imul	 rcx, rcx, 1
  0016e	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [rax+rcx]
  00173	f3 0f 11 44 24
	08		 movss	 DWORD PTR b$[rsp], xmm0

; 286  :         c = src.x * x[0][2] + src.y * x[1][2] + src.z * x[2][2] + x[3][2];

  00179	b8 10 00 00 00	 mov	 eax, 16
  0017e	48 6b c0 00	 imul	 rax, rax, 0
  00182	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00187	48 03 c8	 add	 rcx, rax
  0018a	48 8b c1	 mov	 rax, rcx
  0018d	b9 04 00 00 00	 mov	 ecx, 4
  00192	48 6b c9 02	 imul	 rcx, rcx, 2
  00196	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  0019b	f3 0f 10 02	 movss	 xmm0, DWORD PTR [rdx]
  0019f	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [rax+rcx]
  001a4	b8 10 00 00 00	 mov	 eax, 16
  001a9	48 6b c0 01	 imul	 rax, rax, 1
  001ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  001b2	48 03 c8	 add	 rcx, rax
  001b5	48 8b c1	 mov	 rax, rcx
  001b8	b9 04 00 00 00	 mov	 ecx, 4
  001bd	48 6b c9 02	 imul	 rcx, rcx, 2
  001c1	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  001c6	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [rdx+4]
  001cb	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [rax+rcx]
  001d0	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d4	b8 10 00 00 00	 mov	 eax, 16
  001d9	48 6b c0 02	 imul	 rax, rax, 2
  001dd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  001e2	48 03 c8	 add	 rcx, rax
  001e5	48 8b c1	 mov	 rax, rcx
  001e8	b9 04 00 00 00	 mov	 ecx, 4
  001ed	48 6b c9 02	 imul	 rcx, rcx, 2
  001f1	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  001f6	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [rdx+8]
  001fb	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [rax+rcx]
  00200	f3 0f 58 c1	 addss	 xmm0, xmm1
  00204	b8 10 00 00 00	 mov	 eax, 16
  00209	48 6b c0 03	 imul	 rax, rax, 3
  0020d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00212	48 03 c8	 add	 rcx, rax
  00215	48 8b c1	 mov	 rax, rcx
  00218	b9 04 00 00 00	 mov	 ecx, 4
  0021d	48 6b c9 02	 imul	 rcx, rcx, 2
  00221	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [rax+rcx]
  00226	f3 0f 11 44 24
	0c		 movss	 DWORD PTR c$[rsp], xmm0

; 287  : 
; 288  :         //w is a factor in the transformation matrix that has to be always 1
; 289  :         w = src.x * x[0][3] + src.y * x[1][3] + src.z * x[2][3] + x[3][3];

  0022c	b8 10 00 00 00	 mov	 eax, 16
  00231	48 6b c0 00	 imul	 rax, rax, 0
  00235	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0023a	48 03 c8	 add	 rcx, rax
  0023d	48 8b c1	 mov	 rax, rcx
  00240	b9 04 00 00 00	 mov	 ecx, 4
  00245	48 6b c9 03	 imul	 rcx, rcx, 3
  00249	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  0024e	f3 0f 10 02	 movss	 xmm0, DWORD PTR [rdx]
  00252	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [rax+rcx]
  00257	b8 10 00 00 00	 mov	 eax, 16
  0025c	48 6b c0 01	 imul	 rax, rax, 1
  00260	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00265	48 03 c8	 add	 rcx, rax
  00268	48 8b c1	 mov	 rax, rcx
  0026b	b9 04 00 00 00	 mov	 ecx, 4
  00270	48 6b c9 03	 imul	 rcx, rcx, 3
  00274	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  00279	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [rdx+4]
  0027e	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [rax+rcx]
  00283	f3 0f 58 c1	 addss	 xmm0, xmm1
  00287	b8 10 00 00 00	 mov	 eax, 16
  0028c	48 6b c0 02	 imul	 rax, rax, 2
  00290	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00295	48 03 c8	 add	 rcx, rax
  00298	48 8b c1	 mov	 rax, rcx
  0029b	b9 04 00 00 00	 mov	 ecx, 4
  002a0	48 6b c9 03	 imul	 rcx, rcx, 3
  002a4	48 8b 54 24 28	 mov	 rdx, QWORD PTR src$[rsp]
  002a9	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [rdx+8]
  002ae	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [rax+rcx]
  002b3	f3 0f 58 c1	 addss	 xmm0, xmm1
  002b7	b8 10 00 00 00	 mov	 eax, 16
  002bc	48 6b c0 03	 imul	 rax, rax, 3
  002c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  002c5	48 03 c8	 add	 rcx, rax
  002c8	48 8b c1	 mov	 rax, rcx
  002cb	b9 04 00 00 00	 mov	 ecx, 4
  002d0	48 6b c9 03	 imul	 rcx, rcx, 3
  002d4	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [rax+rcx]
  002d9	f3 0f 11 04 24	 movss	 DWORD PTR w$[rsp], xmm0

; 290  : 
; 291  :         //In case w is different from 1 we scale the result by the factor 1/w
; 292  :         dst.x = a / w;

  002de	f3 0f 10 44 24
	04		 movss	 xmm0, DWORD PTR a$[rsp]
  002e4	f3 0f 5e 04 24	 divss	 xmm0, DWORD PTR w$[rsp]
  002e9	48 8b 44 24 30	 mov	 rax, QWORD PTR dst$[rsp]
  002ee	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 293  :         dst.y = b / w;

  002f2	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR b$[rsp]
  002f8	f3 0f 5e 04 24	 divss	 xmm0, DWORD PTR w$[rsp]
  002fd	48 8b 44 24 30	 mov	 rax, QWORD PTR dst$[rsp]
  00302	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 294  :         dst.z = c / w;

  00307	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR c$[rsp]
  0030d	f3 0f 5e 04 24	 divss	 xmm0, DWORD PTR w$[rsp]
  00312	48 8b 44 24 30	 mov	 rax, QWORD PTR dst$[rsp]
  00317	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 295  :     }

  0031c	48 83 c4 18	 add	 rsp, 24
  00320	c3		 ret	 0
??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z ENDP ; Matrix44<float>::MultPointMatrix<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
PNDC$ = 32
PRaster$ = 40
PCamera$ = 48
PScreen$ = 64
__$ReturnUdt$ = 96
WorldToCamera$ = 104
V$ = 112
Camera$ = 120
ImageWidth$ = 128
ImageHeight$ = 136
?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z PROC ; ProjectPoint

; 239  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 240  :     Vec3f PCamera;

  00018	48 8d 4c 24 30	 lea	 rcx, QWORD PTR PCamera$[rsp]
  0001d	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@XZ	; Vec3<float>::Vec3<float>

; 241  :     WorldToCamera.MultPointMatrix(V, PCamera);

  00022	4c 8d 44 24 30	 lea	 r8, QWORD PTR PCamera$[rsp]
  00027	48 8b 54 24 70	 mov	 rdx, QWORD PTR V$[rsp]
  0002c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR WorldToCamera$[rsp]
  00031	e8 00 00 00 00	 call	 ??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z ; Matrix44<float>::MultPointMatrix<float>

; 242  : 
; 243  :     Vec3f PScreen;

  00036	48 8d 4c 24 40	 lea	 rcx, QWORD PTR PScreen$[rsp]
  0003b	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@XZ	; Vec3<float>::Vec3<float>

; 244  : 
; 245  :     PScreen.x = (PCamera.x * Camera.CanvasDistance)/(- PCamera.z);

  00040	48 8b 44 24 78	 mov	 rax, QWORD PTR Camera$[rsp]
  00045	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR PCamera$[rsp]
  0004b	f3 0f 59 40 4c	 mulss	 xmm0, DWORD PTR [rax+76]
  00050	f3 0f 10 4c 24
	38		 movss	 xmm1, DWORD PTR PCamera$[rsp+8]
  00056	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0005d	f3 0f 5e c1	 divss	 xmm0, xmm1
  00061	f3 0f 11 44 24
	40		 movss	 DWORD PTR PScreen$[rsp], xmm0

; 246  :     PScreen.y = (PCamera.y * Camera.CanvasDistance)/(- PCamera.z);

  00067	48 8b 44 24 78	 mov	 rax, QWORD PTR Camera$[rsp]
  0006c	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR PCamera$[rsp+4]
  00072	f3 0f 59 40 4c	 mulss	 xmm0, DWORD PTR [rax+76]
  00077	f3 0f 10 4c 24
	38		 movss	 xmm1, DWORD PTR PCamera$[rsp+8]
  0007d	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00084	f3 0f 5e c1	 divss	 xmm0, xmm1
  00088	f3 0f 11 44 24
	44		 movss	 DWORD PTR PScreen$[rsp+4], xmm0

; 247  :     PScreen.z = Camera.CanvasDistance;

  0008e	48 8b 44 24 78	 mov	 rax, QWORD PTR Camera$[rsp]
  00093	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [rax+76]
  00098	f3 0f 11 44 24
	48		 movss	 DWORD PTR PScreen$[rsp+8], xmm0

; 248  : 
; 249  :     Vec2f PNDC;

  0009e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR PNDC$[rsp]
  000a3	e8 00 00 00 00	 call	 ??0?$Vec2@M@@QEAA@XZ	; Vec2<float>::Vec2<float>

; 250  :     PNDC.x = (PScreen.x + Camera.CanvasWidth /2) / (Camera.CanvasWidth);

  000a8	48 8b 44 24 78	 mov	 rax, QWORD PTR Camera$[rsp]
  000ad	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [rax+80]
  000b2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000ba	f3 0f 10 4c 24
	40		 movss	 xmm1, DWORD PTR PScreen$[rsp]
  000c0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000c4	0f 28 c1	 movaps	 xmm0, xmm1
  000c7	48 8b 44 24 78	 mov	 rax, QWORD PTR Camera$[rsp]
  000cc	f3 0f 5e 40 50	 divss	 xmm0, DWORD PTR [rax+80]
  000d1	f3 0f 11 44 24
	20		 movss	 DWORD PTR PNDC$[rsp], xmm0

; 251  :     PNDC.y = (PScreen.y + Camera.CanvasHeight /2) / (Camera.CanvasHeight);

  000d7	48 8b 44 24 78	 mov	 rax, QWORD PTR Camera$[rsp]
  000dc	f3 0f 10 40 54	 movss	 xmm0, DWORD PTR [rax+84]
  000e1	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000e9	f3 0f 10 4c 24
	44		 movss	 xmm1, DWORD PTR PScreen$[rsp+4]
  000ef	f3 0f 58 c8	 addss	 xmm1, xmm0
  000f3	0f 28 c1	 movaps	 xmm0, xmm1
  000f6	48 8b 44 24 78	 mov	 rax, QWORD PTR Camera$[rsp]
  000fb	f3 0f 5e 40 54	 divss	 xmm0, DWORD PTR [rax+84]
  00100	f3 0f 11 44 24
	24		 movss	 DWORD PTR PNDC$[rsp+4], xmm0

; 252  : 
; 253  :     Vec2i PRaster;

  00106	48 8d 4c 24 28	 lea	 rcx, QWORD PTR PRaster$[rsp]
  0010b	e8 00 00 00 00	 call	 ??0?$Vec2@H@@QEAA@XZ	; Vec2<int>::Vec2<int>

; 254  :     PRaster.x = (int)(PNDC.x * (float)ImageWidth);

  00110	f3 0f 2a 84 24
	80 00 00 00	 cvtsi2ss xmm0, DWORD PTR ImageWidth$[rsp]
  00119	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR PNDC$[rsp]
  0011f	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00123	0f 28 c1	 movaps	 xmm0, xmm1
  00126	f3 0f 2c c0	 cvttss2si eax, xmm0
  0012a	89 44 24 28	 mov	 DWORD PTR PRaster$[rsp], eax

; 255  :     PRaster.y = (int)(PNDC.y * (float)ImageHeight);

  0012e	f3 0f 2a 84 24
	88 00 00 00	 cvtsi2ss xmm0, DWORD PTR ImageHeight$[rsp]
  00137	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR PNDC$[rsp+4]
  0013d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00141	0f 28 c1	 movaps	 xmm0, xmm1
  00144	f3 0f 2c c0	 cvttss2si eax, xmm0
  00148	89 44 24 2c	 mov	 DWORD PTR PRaster$[rsp+4], eax

; 256  : 
; 257  :     return PRaster;

  0014c	48 8b 44 24 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00151	48 8b 4c 24 28	 mov	 rcx, QWORD PTR PRaster$[rsp]
  00156	48 89 08	 mov	 QWORD PTR [rax], rcx
  00159	48 8b 44 24 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 258  : }

  0015e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00162	c3		 ret	 0
?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z ENDP ; ProjectPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
PolNormal$ = 32
Buffer$ = 64
Camera$ = 72
v0$ = 80
v1$ = 88
v2$ = 96
ImageWidth$ = 104
ImageHeight$ = 112
?RenderTriangle@@YAXUwin32_offscreen_buffer@@Urender_camera@@V?$Vec3@M@@22HH@Z PROC ; RenderTriangle

; 233  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 234  :     Vec3f PolNormal = v0.CrossProduct(v1);

  00018	4c 8b 44 24 58	 mov	 r8, QWORD PTR v1$[rsp]
  0001d	48 8d 54 24 20	 lea	 rdx, QWORD PTR PolNormal$[rsp]
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v0$[rsp]
  00027	e8 00 00 00 00	 call	 ?CrossProduct@?$Vec3@M@@QEAA?AV1@AEAV1@@Z ; Vec3<float>::CrossProduct

; 235  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
?RenderTriangle@@YAXUwin32_offscreen_buffer@@Urender_camera@@V?$Vec3@M@@22HH@Z ENDP ; RenderTriangle
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\utility
;	COMDAT ??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z
_TEXT	SEGMENT
_Tmp$ = 32
_Left$ = 64
_Right$ = 72
??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z PROC	; std::swap<Vec2<int>,0>, COMDAT

; 103  :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 104  :     _Ty _Tmp = _STD move(_Left);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00013	e8 00 00 00 00	 call	 ??$move@AEAV?$Vec2@H@@@std@@YA$$QEAV?$Vec2@H@@AEAV1@@Z ; std::move<Vec2<int> &>
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 89 44 24 20	 mov	 QWORD PTR _Tmp$[rsp], rax

; 105  :     _Left    = _STD move(_Right);

  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00025	e8 00 00 00 00	 call	 ??$move@AEAV?$Vec2@H@@@std@@YA$$QEAV?$Vec2@H@@AEAV1@@Z ; std::move<Vec2<int> &>
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00032	48 89 01	 mov	 QWORD PTR [rcx], rax

; 106  :     _Right   = _STD move(_Tmp);

  00035	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  0003a	e8 00 00 00 00	 call	 ??$move@AEAV?$Vec2@H@@@std@@YA$$QEAV?$Vec2@H@@AEAV1@@Z ; std::move<Vec2<int> &>
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00047	48 89 01	 mov	 QWORD PTR [rcx], rax

; 107  : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z ENDP	; std::swap<Vec2<int>,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\utility
;	COMDAT ??$min@H@std@@YAAEBHAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
$T1 = 8
_Left$ = 32
_Right$ = 40
??$min@H@std@@YAAEBHAEBH0@Z PROC			; std::min<int>, COMDAT

; 66   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

  0000e	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Left$[rsp]
  00018	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001a	39 08		 cmp	 DWORD PTR [rax], ecx
  0001c	7d 0b		 jge	 SHORT $LN3@min
  0001e	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00023	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
  00027	eb 09		 jmp	 SHORT $LN4@min
$LN3@min:
  00029	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  0002e	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
$LN4@min:
  00032	48 8b 04 24	 mov	 rax, QWORD PTR tv65[rsp]
  00036	48 89 44 24 08	 mov	 QWORD PTR $T1[rsp], rax
  0003b	48 8b 44 24 08	 mov	 rax, QWORD PTR $T1[rsp]

; 69   : }

  00040	48 83 c4 18	 add	 rsp, 24
  00044	c3		 ret	 0
??$min@H@std@@YAAEBHAEBH0@Z ENDP			; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\utility
;	COMDAT ??$max@H@std@@YAAEBHAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
$T1 = 8
_Left$ = 32
_Right$ = 40
??$max@H@std@@YAAEBHAEBH0@Z PROC			; std::max<int>, COMDAT

; 42   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 43   :     // return larger of _Left and _Right
; 44   :     return _Left < _Right ? _Right : _Left;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00018	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001a	39 08		 cmp	 DWORD PTR [rax], ecx
  0001c	7d 0b		 jge	 SHORT $LN3@max
  0001e	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00023	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
  00027	eb 09		 jmp	 SHORT $LN4@max
$LN3@max:
  00029	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  0002e	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
$LN4@max:
  00032	48 8b 04 24	 mov	 rax, QWORD PTR tv65[rsp]
  00036	48 89 44 24 08	 mov	 QWORD PTR $T1[rsp], rax
  0003b	48 8b 44 24 08	 mov	 rax, QWORD PTR $T1[rsp]

; 45   : }

  00040	48 83 c4 18	 add	 rsp, 24
  00044	c3		 ret	 0
??$max@H@std@@YAAEBHAEBH0@Z ENDP			; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ??0?$Vec2@H@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$Vec2@H@@QEAA@XZ PROC				; Vec2<int>::Vec2<int>, COMDAT

; 13   :     Vec2() : x(0), y(0) {};

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00010	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00015	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  0001c	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00021	c3		 ret	 0
??0?$Vec2@H@@QEAA@XZ ENDP				; Vec2<int>::Vec2<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
xx$1 = 32
yy$2 = 36
m$ = 40
LineWidth$ = 44
w$3 = 48
$T4 = 52
$T5 = 56
$T6 = 60
$T7 = 64
$T8 = 68
$T9 = 72
$T10 = 76
$T11 = 80
b$12 = 84
yy$13 = 88
p$14 = 92
xx$15 = 96
$T16 = 112
$T17 = 192
$T18 = 272
Buffer$ = 384
p0$ = 392
p1$ = 400
?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z PROC ; RenderLine

; 165  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H

; 166  :     int LineWidth = 1;

  00018	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR LineWidth$[rsp], 1

; 167  :     float m;
; 168  :     
; 169  :     p0.x = std::max(0, p0.x); p0.x = std::min(p0.x, Buffer.Width-1);

  00020	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR $T4[rsp], 0
  00028	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR p0$[rsp]
  00030	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $T4[rsp]
  00035	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0003a	8b 00		 mov	 eax, DWORD PTR [rax]
  0003c	89 84 24 88 01
	00 00		 mov	 DWORD PTR p0$[rsp], eax
  00043	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0004b	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0004e	ff c8		 dec	 eax
  00050	89 44 24 38	 mov	 DWORD PTR $T5[rsp], eax
  00054	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T5[rsp]
  00059	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR p0$[rsp]
  00061	e8 00 00 00 00	 call	 ??$min@H@std@@YAAEBHAEBH0@Z ; std::min<int>
  00066	8b 00		 mov	 eax, DWORD PTR [rax]
  00068	89 84 24 88 01
	00 00		 mov	 DWORD PTR p0$[rsp], eax

; 170  :     p0.y = std::max(0, p0.y); p0.y = std::min(p0.y, Buffer.Height-1);

  0006f	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR $T6[rsp], 0
  00077	48 8d 94 24 8c
	01 00 00	 lea	 rdx, QWORD PTR p0$[rsp+4]
  0007f	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR $T6[rsp]
  00084	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00089	8b 00		 mov	 eax, DWORD PTR [rax]
  0008b	89 84 24 8c 01
	00 00		 mov	 DWORD PTR p0$[rsp+4], eax
  00092	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0009a	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0009d	ff c8		 dec	 eax
  0009f	89 44 24 40	 mov	 DWORD PTR $T7[rsp], eax
  000a3	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T7[rsp]
  000a8	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR p0$[rsp+4]
  000b0	e8 00 00 00 00	 call	 ??$min@H@std@@YAAEBHAEBH0@Z ; std::min<int>
  000b5	8b 00		 mov	 eax, DWORD PTR [rax]
  000b7	89 84 24 8c 01
	00 00		 mov	 DWORD PTR p0$[rsp+4], eax

; 171  : 
; 172  :     p1.x = std::max(0, p1.x); p1.x = std::min(p1.x, Buffer.Width-1);

  000be	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR $T8[rsp], 0
  000c6	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR p1$[rsp]
  000ce	48 8d 4c 24 44	 lea	 rcx, QWORD PTR $T8[rsp]
  000d3	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  000d8	8b 00		 mov	 eax, DWORD PTR [rax]
  000da	89 84 24 90 01
	00 00		 mov	 DWORD PTR p1$[rsp], eax
  000e1	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  000e9	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000ec	ff c8		 dec	 eax
  000ee	89 44 24 48	 mov	 DWORD PTR $T9[rsp], eax
  000f2	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T9[rsp]
  000f7	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR p1$[rsp]
  000ff	e8 00 00 00 00	 call	 ??$min@H@std@@YAAEBHAEBH0@Z ; std::min<int>
  00104	8b 00		 mov	 eax, DWORD PTR [rax]
  00106	89 84 24 90 01
	00 00		 mov	 DWORD PTR p1$[rsp], eax

; 173  :     p1.y = std::max(0, p1.y); p1.y = std::min(p1.y, Buffer.Height-1);

  0010d	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR $T10[rsp], 0
  00115	48 8d 94 24 94
	01 00 00	 lea	 rdx, QWORD PTR p1$[rsp+4]
  0011d	48 8d 4c 24 4c	 lea	 rcx, QWORD PTR $T10[rsp]
  00122	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00127	8b 00		 mov	 eax, DWORD PTR [rax]
  00129	89 84 24 94 01
	00 00		 mov	 DWORD PTR p1$[rsp+4], eax
  00130	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  00138	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0013b	ff c8		 dec	 eax
  0013d	89 44 24 50	 mov	 DWORD PTR $T11[rsp], eax
  00141	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T11[rsp]
  00146	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR p1$[rsp+4]
  0014e	e8 00 00 00 00	 call	 ??$min@H@std@@YAAEBHAEBH0@Z ; std::min<int>
  00153	8b 00		 mov	 eax, DWORD PTR [rax]
  00155	89 84 24 94 01
	00 00		 mov	 DWORD PTR p1$[rsp+4], eax

; 174  : 
; 175  :     //If line is no completly vertical
; 176  :     if(p0.x != p1.x)

  0015c	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR p1$[rsp]
  00163	39 84 24 88 01
	00 00		 cmp	 DWORD PTR p0$[rsp], eax
  0016a	74 36		 je	 SHORT $LN8@RenderLine

; 177  :     {
; 178  :         //Get slope
; 179  :         m = (float)(p1.y - p0.y)/(float)(p1.x - p0.x);

  0016c	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR p0$[rsp+4]
  00173	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR p1$[rsp+4]
  0017a	2b c8		 sub	 ecx, eax
  0017c	8b c1		 mov	 eax, ecx
  0017e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00182	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR p0$[rsp]
  00189	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR p1$[rsp]
  00190	2b c8		 sub	 ecx, eax
  00192	8b c1		 mov	 eax, ecx
  00194	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00198	f3 0f 5e c1	 divss	 xmm0, xmm1
  0019c	f3 0f 11 44 24
	28		 movss	 DWORD PTR m$[rsp], xmm0
$LN8@RenderLine:

; 180  :     }
; 181  : 
; 182  :     //If line not vertical and slope is mainly horizontal
; 183  :     if(p0.x != p1.x && std::abs(m) <= 1)

  001a2	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR p1$[rsp]
  001a9	39 84 24 88 01
	00 00		 cmp	 DWORD PTR p0$[rsp], eax
  001b0	0f 84 e5 00 00
	00		 je	 $LN9@RenderLine
  001b6	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR m$[rsp]
  001bc	e8 00 00 00 00	 call	 ?abs@@YAMM@Z		; abs
  001c1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001c9	0f 2f c8	 comiss	 xmm1, xmm0
  001cc	0f 82 c9 00 00
	00		 jb	 $LN9@RenderLine

; 184  :     {
; 185  :         //Rearrange so point with lower X is p0
; 186  :         if(p1.x < p0.x)

  001d2	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR p0$[rsp]
  001d9	39 84 24 90 01
	00 00		 cmp	 DWORD PTR p1$[rsp], eax
  001e0	7d 15		 jge	 SHORT $LN11@RenderLine

; 187  :         {
; 188  :             std::swap(p0, p1);

  001e2	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR p1$[rsp]
  001ea	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR p0$[rsp]
  001f2	e8 00 00 00 00	 call	 ??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z ; std::swap<Vec2<int>,0>
$LN11@RenderLine:

; 189  :         }
; 190  : 
; 191  :         //Get vertical offset of line
; 192  :         float b = p0.y - m * p0.x;

  001f7	f3 0f 2a 84 24
	8c 01 00 00	 cvtsi2ss xmm0, DWORD PTR p0$[rsp+4]
  00200	f3 0f 2a 8c 24
	88 01 00 00	 cvtsi2ss xmm1, DWORD PTR p0$[rsp]
  00209	f3 0f 10 54 24
	28		 movss	 xmm2, DWORD PTR m$[rsp]
  0020f	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00213	0f 28 ca	 movaps	 xmm1, xmm2
  00216	f3 0f 5c c1	 subss	 xmm0, xmm1
  0021a	f3 0f 11 44 24
	54		 movss	 DWORD PTR b$12[rsp], xmm0

; 193  : 
; 194  :         for(int xx = p0.x; xx <= p1.x; xx++)

  00220	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR p0$[rsp]
  00227	89 44 24 20	 mov	 DWORD PTR xx$1[rsp], eax
  0022b	eb 0a		 jmp	 SHORT $LN4@RenderLine
$LN2@RenderLine:
  0022d	8b 44 24 20	 mov	 eax, DWORD PTR xx$1[rsp]
  00231	ff c0		 inc	 eax
  00233	89 44 24 20	 mov	 DWORD PTR xx$1[rsp], eax
$LN4@RenderLine:
  00237	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR p1$[rsp]
  0023e	39 44 24 20	 cmp	 DWORD PTR xx$1[rsp], eax
  00242	7f 52		 jg	 SHORT $LN3@RenderLine

; 195  :         {
; 196  :             int yy = m * xx + b;

  00244	f3 0f 2a 44 24
	20		 cvtsi2ss xmm0, DWORD PTR xx$1[rsp]
  0024a	f3 0f 10 4c 24
	28		 movss	 xmm1, DWORD PTR m$[rsp]
  00250	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00254	0f 28 c1	 movaps	 xmm0, xmm1
  00257	f3 0f 58 44 24
	54		 addss	 xmm0, DWORD PTR b$12[rsp]
  0025d	f3 0f 2c c0	 cvttss2si eax, xmm0
  00261	89 44 24 58	 mov	 DWORD PTR yy$13[rsp], eax

; 197  :             DrawLineSegment(Buffer, LineWidth, xx, yy);

  00265	48 8d 44 24 70	 lea	 rax, QWORD PTR $T16[rsp]
  0026a	48 8b f8	 mov	 rdi, rax
  0026d	48 8b b4 24 80
	01 00 00	 mov	 rsi, QWORD PTR Buffer$[rsp]
  00275	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0027a	f3 a4		 rep movsb
  0027c	44 8b 4c 24 58	 mov	 r9d, DWORD PTR yy$13[rsp]
  00281	44 8b 44 24 20	 mov	 r8d, DWORD PTR xx$1[rsp]
  00286	8b 54 24 2c	 mov	 edx, DWORD PTR LineWidth$[rsp]
  0028a	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T16[rsp]
  0028f	e8 00 00 00 00	 call	 ?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z ; DrawLineSegment

; 198  :         }

  00294	eb 97		 jmp	 SHORT $LN2@RenderLine
$LN3@RenderLine:

; 199  :     }

  00296	e9 51 01 00 00	 jmp	 $LN10@RenderLine
$LN9@RenderLine:

; 200  :     //If slope is mainly vertical
; 201  :     else
; 202  :     {
; 203  :         //If Y is equal it means they're the same point
; 204  :         if(p0.y != p1.y)

  0029b	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR p1$[rsp+4]
  002a2	39 84 24 8c 01
	00 00		 cmp	 DWORD PTR p0$[rsp+4], eax
  002a9	0f 84 02 01 00
	00		 je	 $LN12@RenderLine

; 205  :         {
; 206  :             //Rearrange so point with lower Y is p0
; 207  :             if(p1.y < p0.y)

  002af	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR p0$[rsp+4]
  002b6	39 84 24 94 01
	00 00		 cmp	 DWORD PTR p1$[rsp+4], eax
  002bd	7d 15		 jge	 SHORT $LN14@RenderLine

; 208  :             {
; 209  :                 std::swap(p0, p1);

  002bf	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR p1$[rsp]
  002c7	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR p0$[rsp]
  002cf	e8 00 00 00 00	 call	 ??$swap@V?$Vec2@H@@$0A@@std@@YAXAEAV?$Vec2@H@@0@Z ; std::swap<Vec2<int>,0>
$LN14@RenderLine:

; 210  :             }
; 211  : 
; 212  :             //Get inverted slope
; 213  :             float w = (float)(p1.x - p0.x)/(float)(p1.y - p0.y);

  002d4	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR p0$[rsp]
  002db	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR p1$[rsp]
  002e2	2b c8		 sub	 ecx, eax
  002e4	8b c1		 mov	 eax, ecx
  002e6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002ea	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR p0$[rsp+4]
  002f1	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR p1$[rsp+4]
  002f8	2b c8		 sub	 ecx, eax
  002fa	8b c1		 mov	 eax, ecx
  002fc	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00300	f3 0f 5e c1	 divss	 xmm0, xmm1
  00304	f3 0f 11 44 24
	30		 movss	 DWORD PTR w$3[rsp], xmm0

; 214  :             //Get horizontal offset of line
; 215  :             float p = p0.x - w * p0.y;

  0030a	f3 0f 2a 84 24
	88 01 00 00	 cvtsi2ss xmm0, DWORD PTR p0$[rsp]
  00313	f3 0f 2a 8c 24
	8c 01 00 00	 cvtsi2ss xmm1, DWORD PTR p0$[rsp+4]
  0031c	f3 0f 10 54 24
	30		 movss	 xmm2, DWORD PTR w$3[rsp]
  00322	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00326	0f 28 ca	 movaps	 xmm1, xmm2
  00329	f3 0f 5c c1	 subss	 xmm0, xmm1
  0032d	f3 0f 11 44 24
	5c		 movss	 DWORD PTR p$14[rsp], xmm0

; 216  : 
; 217  :             for(int yy = p0.y; yy <= p1.y; yy++)

  00333	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR p0$[rsp+4]
  0033a	89 44 24 24	 mov	 DWORD PTR yy$2[rsp], eax
  0033e	eb 0a		 jmp	 SHORT $LN7@RenderLine
$LN5@RenderLine:
  00340	8b 44 24 24	 mov	 eax, DWORD PTR yy$2[rsp]
  00344	ff c0		 inc	 eax
  00346	89 44 24 24	 mov	 DWORD PTR yy$2[rsp], eax
$LN7@RenderLine:
  0034a	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR p1$[rsp+4]
  00351	39 44 24 24	 cmp	 DWORD PTR yy$2[rsp], eax
  00355	7f 58		 jg	 SHORT $LN6@RenderLine

; 218  :             {
; 219  :                 int xx = w * yy + p;

  00357	f3 0f 2a 44 24
	24		 cvtsi2ss xmm0, DWORD PTR yy$2[rsp]
  0035d	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR w$3[rsp]
  00363	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00367	0f 28 c1	 movaps	 xmm0, xmm1
  0036a	f3 0f 58 44 24
	5c		 addss	 xmm0, DWORD PTR p$14[rsp]
  00370	f3 0f 2c c0	 cvttss2si eax, xmm0
  00374	89 44 24 60	 mov	 DWORD PTR xx$15[rsp], eax

; 220  :                 DrawLineSegment(Buffer, LineWidth, xx, yy);

  00378	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T17[rsp]
  00380	48 8b f8	 mov	 rdi, rax
  00383	48 8b b4 24 80
	01 00 00	 mov	 rsi, QWORD PTR Buffer$[rsp]
  0038b	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00390	f3 a4		 rep movsb
  00392	44 8b 4c 24 24	 mov	 r9d, DWORD PTR yy$2[rsp]
  00397	44 8b 44 24 60	 mov	 r8d, DWORD PTR xx$15[rsp]
  0039c	8b 54 24 2c	 mov	 edx, DWORD PTR LineWidth$[rsp]
  003a0	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T17[rsp]
  003a8	e8 00 00 00 00	 call	 ?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z ; DrawLineSegment

; 221  :             }

  003ad	eb 91		 jmp	 SHORT $LN5@RenderLine
$LN6@RenderLine:

; 222  :         }

  003af	eb 3b		 jmp	 SHORT $LN13@RenderLine
$LN12@RenderLine:

; 223  :         else
; 224  :         {
; 225  :             DrawLineSegment(Buffer, LineWidth, p0.x, p0.y);

  003b1	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR $T18[rsp]
  003b9	48 8b f8	 mov	 rdi, rax
  003bc	48 8b b4 24 80
	01 00 00	 mov	 rsi, QWORD PTR Buffer$[rsp]
  003c4	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  003c9	f3 a4		 rep movsb
  003cb	44 8b 8c 24 8c
	01 00 00	 mov	 r9d, DWORD PTR p0$[rsp+4]
  003d3	44 8b 84 24 88
	01 00 00	 mov	 r8d, DWORD PTR p0$[rsp]
  003db	8b 54 24 2c	 mov	 edx, DWORD PTR LineWidth$[rsp]
  003df	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T18[rsp]
  003e7	e8 00 00 00 00	 call	 ?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z ; DrawLineSegment
$LN13@RenderLine:
$LN10@RenderLine:

; 226  :         }
; 227  :         
; 228  :     }
; 229  : 
; 230  : }

  003ec	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  003f3	5f		 pop	 rdi
  003f4	5e		 pop	 rsi
  003f5	c3		 ret	 0
?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z ENDP ; RenderLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
i$1 = 0
j$2 = 4
Pixel$3 = 8
Row$4 = 16
Buffer$ = 48
Size$ = 56
X$ = 64
Y$ = 72
?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z PROC ; DrawLineSegment

; 123  : {

$LN10:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 124  :     if(X < Buffer.Width && X >= 0 && Y < Buffer.Height && Y >= 0)

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  0001c	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0001f	39 44 24 40	 cmp	 DWORD PTR X$[rsp], eax
  00023	0f 8d e3 00 00
	00		 jge	 $LN8@DrawLineSe
  00029	83 7c 24 40 00	 cmp	 DWORD PTR X$[rsp], 0
  0002e	0f 8c d8 00 00
	00		 jl	 $LN8@DrawLineSe
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00039	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0003c	39 44 24 48	 cmp	 DWORD PTR Y$[rsp], eax
  00040	0f 8d c6 00 00
	00		 jge	 $LN8@DrawLineSe
  00046	83 7c 24 48 00	 cmp	 DWORD PTR Y$[rsp], 0
  0004b	0f 8c bb 00 00
	00		 jl	 $LN8@DrawLineSe

; 125  :     {
; 126  :         uint8_t *Row = (uint8_t *)Buffer.Memory;

  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00056	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0005a	48 89 44 24 10	 mov	 QWORD PTR Row$4[rsp], rax

; 127  :         Row += Buffer.Pitch * Y;

  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00064	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  00067	0f af 44 24 48	 imul	 eax, DWORD PTR Y$[rsp]
  0006c	48 98		 cdqe
  0006e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Row$4[rsp]
  00073	48 03 c8	 add	 rcx, rax
  00076	48 8b c1	 mov	 rax, rcx
  00079	48 89 44 24 10	 mov	 QWORD PTR Row$4[rsp], rax

; 128  :         for(int i = 0; i < Size; i++)

  0007e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$1[rsp], 0
  00085	eb 08		 jmp	 SHORT $LN4@DrawLineSe
$LN2@DrawLineSe:
  00087	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  0008a	ff c0		 inc	 eax
  0008c	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@DrawLineSe:
  0008f	8b 44 24 38	 mov	 eax, DWORD PTR Size$[rsp]
  00093	39 04 24	 cmp	 DWORD PTR i$1[rsp], eax
  00096	7d 74		 jge	 SHORT $LN3@DrawLineSe

; 129  :         {
; 130  :             uint32_t *Pixel = (uint32_t *)Row;

  00098	48 8b 44 24 10	 mov	 rax, QWORD PTR Row$4[rsp]
  0009d	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 131  :             Pixel += X;

  000a2	48 63 44 24 40	 movsxd	 rax, DWORD PTR X$[rsp]
  000a7	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Pixel$3[rsp]
  000ac	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  000b0	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 132  :             for(int j = 0; j < Size; j++)

  000b5	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR j$2[rsp], 0
  000bd	eb 0a		 jmp	 SHORT $LN7@DrawLineSe
$LN5@DrawLineSe:
  000bf	8b 44 24 04	 mov	 eax, DWORD PTR j$2[rsp]
  000c3	ff c0		 inc	 eax
  000c5	89 44 24 04	 mov	 DWORD PTR j$2[rsp], eax
$LN7@DrawLineSe:
  000c9	8b 44 24 38	 mov	 eax, DWORD PTR Size$[rsp]
  000cd	39 44 24 04	 cmp	 DWORD PTR j$2[rsp], eax
  000d1	7d 1b		 jge	 SHORT $LN6@DrawLineSe

; 133  :             {
; 134  :                 *Pixel = 255;

  000d3	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000d8	c7 00 ff 00 00
	00		 mov	 DWORD PTR [rax], 255	; 000000ffH

; 135  :                 Pixel++;

  000de	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000e3	48 83 c0 04	 add	 rax, 4
  000e7	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 136  :             }

  000ec	eb d1		 jmp	 SHORT $LN5@DrawLineSe
$LN6@DrawLineSe:

; 137  :             Row += Buffer.Pitch;

  000ee	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f3	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  000f7	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Row$4[rsp]
  000fc	48 03 c8	 add	 rcx, rax
  000ff	48 8b c1	 mov	 rax, rcx
  00102	48 89 44 24 10	 mov	 QWORD PTR Row$4[rsp], rax

; 138  :         }   

  00107	e9 7b ff ff ff	 jmp	 $LN2@DrawLineSe
$LN3@DrawLineSe:
$LN8@DrawLineSe:

; 139  :     }
; 140  :  
; 141  : }

  0010c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00110	c3		 ret	 0
?DrawLineSegment@@YAXUwin32_offscreen_buffer@@HHH@Z ENDP ; DrawLineSegment
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
Y$1 = 0
X$2 = 4
Pixel$3 = 8
Row$ = 16
Buffer$ = 48
?CleanBuffer@@YAXUwin32_offscreen_buffer@@@Z PROC	; CleanBuffer

; 88   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 89   :     uint8_t *Row = (uint8_t *)Buffer.Memory; 

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  0000e	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00012	48 89 44 24 10	 mov	 QWORD PTR Row$[rsp], rax

; 90   :     for(int Y = 0; Y < Buffer.Height; Y++)

  00017	c7 04 24 00 00
	00 00		 mov	 DWORD PTR Y$1[rsp], 0
  0001e	eb 08		 jmp	 SHORT $LN4@CleanBuffe
$LN2@CleanBuffe:
  00020	8b 04 24	 mov	 eax, DWORD PTR Y$1[rsp]
  00023	ff c0		 inc	 eax
  00025	89 04 24	 mov	 DWORD PTR Y$1[rsp], eax
$LN4@CleanBuffe:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002d	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00030	39 04 24	 cmp	 DWORD PTR Y$1[rsp], eax
  00033	7d 60		 jge	 SHORT $LN3@CleanBuffe

; 91   :     {
; 92   :         uint32_t *Pixel = (uint32_t *)Row;

  00035	48 8b 44 24 10	 mov	 rax, QWORD PTR Row$[rsp]
  0003a	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 93   :         for(int X = 0; X < Buffer.Width; X++)

  0003f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$2[rsp], 0
  00047	eb 0a		 jmp	 SHORT $LN7@CleanBuffe
$LN5@CleanBuffe:
  00049	8b 44 24 04	 mov	 eax, DWORD PTR X$2[rsp]
  0004d	ff c0		 inc	 eax
  0004f	89 44 24 04	 mov	 DWORD PTR X$2[rsp], eax
$LN7@CleanBuffe:
  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00058	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0005b	39 44 24 04	 cmp	 DWORD PTR X$2[rsp], eax
  0005f	7d 1b		 jge	 SHORT $LN6@CleanBuffe

; 94   :         {
; 95   :             *Pixel = 0;

  00061	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  00066	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 96   :             Pixel++;

  0006c	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  00071	48 83 c0 04	 add	 rax, 4
  00075	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 97   :         }

  0007a	eb cd		 jmp	 SHORT $LN5@CleanBuffe
$LN6@CleanBuffe:

; 98   :         Row += GlobalBackbuffer.Pitch;

  0007c	48 63 05 40 00
	00 00		 movsxd	 rax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+64
  00083	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Row$[rsp]
  00088	48 03 c8	 add	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	48 89 44 24 10	 mov	 QWORD PTR Row$[rsp], rax

; 99   :     }

  00093	eb 8b		 jmp	 SHORT $LN2@CleanBuffe
$LN3@CleanBuffe:

; 100  : }

  00095	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00099	c3		 ret	 0
?CleanBuffer@@YAXUwin32_offscreen_buffer@@@Z ENDP	; CleanBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0render_camera@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0render_camera@@QEAA@XZ PROC				; render_camera::render_camera, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@XZ	; Vec3<float>::Vec3<float>
  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 83 c0 0c	 add	 rax, 12
  0001f	48 8b c8	 mov	 rcx, rax
  00022	e8 00 00 00 00	 call	 ??0?$Matrix44@M@@QEAA@XZ ; Matrix44<float>::Matrix44<float>
  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??0render_camera@@QEAA@XZ ENDP				; render_camera::render_camera
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ?Inverse@?$Matrix44@M@@QEAA?AV1@XZ
_TEXT	SEGMENT
n$1 = 32
n$2 = 36
i$3 = 40
j$4 = 44
i$5 = 48
i$6 = 52
j$7 = 56
i$8 = 60
Factor$9 = 64
Factor$10 = 68
Factor$11 = 72
Factor$12 = 76
tv90 = 80
tv130 = 88
tv163 = 96
tv178 = 104
tv205 = 112
tv246 = 120
Temp$ = 128
Result$ = 192
__$ArrayPad$ = 256
this$ = 304
__$ReturnUdt$ = 312
?Inverse@?$Matrix44@M@@QEAA?AV1@XZ PROC			; Matrix44<float>::Inverse, COMDAT

; 312  :     {

$LN35:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 313  :         Matrix44 Temp(* this);

  00025	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR Temp$[rsp]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	48 8b b4 24 30
	01 00 00	 mov	 rsi, QWORD PTR this$[rsp]
  00038	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0003d	f3 a4		 rep movsb

; 314  :         Matrix44 Result;

  0003f	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  00047	e8 00 00 00 00	 call	 ??0?$Matrix44@M@@QEAA@XZ ; Matrix44<float>::Matrix44<float>

; 315  :         //Using Gauss-Jordan method
; 316  : 
; 317  :         //Scale first row and substract from other rows
; 318  :         //This makes the first columns all zeros(except x[0][0])
; 319  : 
; 320  :         //Loop to scale diagonal to value 1 and neutralize(make value 0) columns downwards
; 321  :         for(int n = 0; n < 3; n++)

  0004c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$1[rsp], 0
  00054	eb 0a		 jmp	 SHORT $LN4@Inverse
$LN2@Inverse:
  00056	8b 44 24 20	 mov	 eax, DWORD PTR n$1[rsp]
  0005a	ff c0		 inc	 eax
  0005c	89 44 24 20	 mov	 DWORD PTR n$1[rsp], eax
$LN4@Inverse:
  00060	83 7c 24 20 03	 cmp	 DWORD PTR n$1[rsp], 3
  00065	0f 8d 37 02 00
	00		 jge	 $LN3@Inverse

; 322  :         {
; 323  :             //Scale row so Temp[n][n] is 1
; 324  :             if(Temp[n][n] != 1)

  0006b	0f b6 54 24 20	 movzx	 edx, BYTE PTR n$1[rsp]
  00070	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  00078	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  0007d	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$1[rsp]
  00082	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  00087	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  0008e	7a 06		 jp	 SHORT $LN34@Inverse
  00090	0f 84 ba 00 00
	00		 je	 $LN26@Inverse
$LN34@Inverse:

; 325  :             {
; 326  :                 float Factor = 1/Temp[n][n];

  00096	0f b6 54 24 20	 movzx	 edx, BYTE PTR n$1[rsp]
  0009b	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  000a3	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  000a8	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$1[rsp]
  000ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b5	f3 0f 5e 04 88	 divss	 xmm0, DWORD PTR [rax+rcx*4]
  000ba	f3 0f 11 44 24
	40		 movss	 DWORD PTR Factor$9[rsp], xmm0

; 327  :                 for(int i = 0; i < 4; i++)

  000c0	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$6[rsp], 0
  000c8	eb 0a		 jmp	 SHORT $LN7@Inverse
$LN5@Inverse:
  000ca	8b 44 24 34	 mov	 eax, DWORD PTR i$6[rsp]
  000ce	ff c0		 inc	 eax
  000d0	89 44 24 34	 mov	 DWORD PTR i$6[rsp], eax
$LN7@Inverse:
  000d4	83 7c 24 34 04	 cmp	 DWORD PTR i$6[rsp], 4
  000d9	7d 75		 jge	 SHORT $LN6@Inverse

; 328  :                 {
; 329  :                     //Do same operation on both matrixes
; 330  :                     Temp[n][i] *= Factor;

  000db	0f b6 54 24 20	 movzx	 edx, BYTE PTR n$1[rsp]
  000e0	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  000e8	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  000ed	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR i$6[rsp]
  000f2	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  000f6	48 89 44 24 50	 mov	 QWORD PTR tv90[rsp], rax
  000fb	48 8b 44 24 50	 mov	 rax, QWORD PTR tv90[rsp]
  00100	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00104	f3 0f 59 44 24
	40		 mulss	 xmm0, DWORD PTR Factor$9[rsp]
  0010a	48 8b 44 24 50	 mov	 rax, QWORD PTR tv90[rsp]
  0010f	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 331  :                     Result[n][i] *= Factor;

  00113	0f b6 54 24 20	 movzx	 edx, BYTE PTR n$1[rsp]
  00118	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  00120	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  00125	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR i$6[rsp]
  0012a	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0012e	48 89 44 24 58	 mov	 QWORD PTR tv130[rsp], rax
  00133	48 8b 44 24 58	 mov	 rax, QWORD PTR tv130[rsp]
  00138	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0013c	f3 0f 59 44 24
	40		 mulss	 xmm0, DWORD PTR Factor$9[rsp]
  00142	48 8b 44 24 58	 mov	 rax, QWORD PTR tv130[rsp]
  00147	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 332  :                 }

  0014b	e9 7a ff ff ff	 jmp	 $LN5@Inverse
$LN6@Inverse:
$LN26@Inverse:

; 333  :             }
; 334  : 
; 335  :             //Scale row and substract from other rows to neutralize column
; 336  :             for(int i = n + 1; i < 4; i++)

  00150	8b 44 24 20	 mov	 eax, DWORD PTR n$1[rsp]
  00154	ff c0		 inc	 eax
  00156	89 44 24 28	 mov	 DWORD PTR i$3[rsp], eax
  0015a	eb 0a		 jmp	 SHORT $LN10@Inverse
$LN8@Inverse:
  0015c	8b 44 24 28	 mov	 eax, DWORD PTR i$3[rsp]
  00160	ff c0		 inc	 eax
  00162	89 44 24 28	 mov	 DWORD PTR i$3[rsp], eax
$LN10@Inverse:
  00166	83 7c 24 28 04	 cmp	 DWORD PTR i$3[rsp], 4
  0016b	0f 8d 2c 01 00
	00		 jge	 $LN9@Inverse

; 337  :             {
; 338  :                 if(Temp[i][n] != 0)

  00171	0f b6 54 24 28	 movzx	 edx, BYTE PTR i$3[rsp]
  00176	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  0017e	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  00183	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$1[rsp]
  00188	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  0018d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00194	7a 06		 jp	 SHORT $LN33@Inverse
  00196	0f 84 fc 00 00
	00		 je	 $LN27@Inverse
$LN33@Inverse:

; 339  :                 {
; 340  :                     float Factor = Temp[i][n];

  0019c	0f b6 54 24 28	 movzx	 edx, BYTE PTR i$3[rsp]
  001a1	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  001a9	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  001ae	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$1[rsp]
  001b3	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  001b8	f3 0f 11 44 24
	44		 movss	 DWORD PTR Factor$10[rsp], xmm0

; 341  :                     for(int j = 0; j < 4; j++)

  001be	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR j$4[rsp], 0
  001c6	eb 0a		 jmp	 SHORT $LN13@Inverse
$LN11@Inverse:
  001c8	8b 44 24 2c	 mov	 eax, DWORD PTR j$4[rsp]
  001cc	ff c0		 inc	 eax
  001ce	89 44 24 2c	 mov	 DWORD PTR j$4[rsp], eax
$LN13@Inverse:
  001d2	83 7c 24 2c 04	 cmp	 DWORD PTR j$4[rsp], 4
  001d7	0f 8d bb 00 00
	00		 jge	 $LN12@Inverse

; 342  :                     {
; 343  :                         Temp[i][j] -= Temp[n][j]*Factor;

  001dd	0f b6 54 24 28	 movzx	 edx, BYTE PTR i$3[rsp]
  001e2	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  001ea	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  001ef	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR j$4[rsp]
  001f4	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  001f8	48 89 44 24 60	 mov	 QWORD PTR tv163[rsp], rax
  001fd	0f b6 54 24 20	 movzx	 edx, BYTE PTR n$1[rsp]
  00202	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  0020a	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  0020f	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR j$4[rsp]
  00214	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  00219	f3 0f 59 44 24
	44		 mulss	 xmm0, DWORD PTR Factor$10[rsp]
  0021f	48 8b 44 24 60	 mov	 rax, QWORD PTR tv163[rsp]
  00224	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00228	f3 0f 5c c8	 subss	 xmm1, xmm0
  0022c	0f 28 c1	 movaps	 xmm0, xmm1
  0022f	48 8b 44 24 60	 mov	 rax, QWORD PTR tv163[rsp]
  00234	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 344  :                         Result[i][j] -= Result[n][j]*Factor;

  00238	0f b6 54 24 28	 movzx	 edx, BYTE PTR i$3[rsp]
  0023d	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  00245	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  0024a	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR j$4[rsp]
  0024f	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00253	48 89 44 24 68	 mov	 QWORD PTR tv178[rsp], rax
  00258	0f b6 54 24 20	 movzx	 edx, BYTE PTR n$1[rsp]
  0025d	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  00265	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  0026a	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR j$4[rsp]
  0026f	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  00274	f3 0f 59 44 24
	44		 mulss	 xmm0, DWORD PTR Factor$10[rsp]
  0027a	48 8b 44 24 68	 mov	 rax, QWORD PTR tv178[rsp]
  0027f	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00283	f3 0f 5c c8	 subss	 xmm1, xmm0
  00287	0f 28 c1	 movaps	 xmm0, xmm1
  0028a	48 8b 44 24 68	 mov	 rax, QWORD PTR tv178[rsp]
  0028f	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 345  :                     }

  00293	e9 30 ff ff ff	 jmp	 $LN11@Inverse
$LN12@Inverse:
$LN27@Inverse:

; 346  :                 }
; 347  :             }

  00298	e9 bf fe ff ff	 jmp	 $LN8@Inverse
$LN9@Inverse:

; 348  :         }

  0029d	e9 b4 fd ff ff	 jmp	 $LN2@Inverse
$LN3@Inverse:

; 349  : 
; 350  :         //Scale fourth row to make Temp[3][3] equal to 1
; 351  :         if(Temp[3][3] != 1)

  002a2	b2 03		 mov	 dl, 3
  002a4	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  002ac	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  002b1	b9 04 00 00 00	 mov	 ecx, 4
  002b6	48 6b c9 03	 imul	 rcx, rcx, 3
  002ba	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  002bf	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  002c6	7a 06		 jp	 SHORT $LN32@Inverse
  002c8	0f 84 a2 00 00
	00		 je	 $LN28@Inverse
$LN32@Inverse:

; 352  :         {
; 353  :             float Factor = 1/Temp[3][3];

  002ce	b2 03		 mov	 dl, 3
  002d0	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  002d8	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  002dd	b9 04 00 00 00	 mov	 ecx, 4
  002e2	48 6b c9 03	 imul	 rcx, rcx, 3
  002e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002ee	f3 0f 5e 04 08	 divss	 xmm0, DWORD PTR [rax+rcx]
  002f3	f3 0f 11 44 24
	48		 movss	 DWORD PTR Factor$11[rsp], xmm0

; 354  :             Temp[3][3] = 1;

  002f9	b2 03		 mov	 dl, 3
  002fb	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  00303	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	48 6b c9 03	 imul	 rcx, rcx, 3
  00311	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00319	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 355  :             for(int i = 0; i < 4; i++)

  0031e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$8[rsp], 0
  00326	eb 0a		 jmp	 SHORT $LN16@Inverse
$LN14@Inverse:
  00328	8b 44 24 3c	 mov	 eax, DWORD PTR i$8[rsp]
  0032c	ff c0		 inc	 eax
  0032e	89 44 24 3c	 mov	 DWORD PTR i$8[rsp], eax
$LN16@Inverse:
  00332	83 7c 24 3c 04	 cmp	 DWORD PTR i$8[rsp], 4
  00337	7d 37		 jge	 SHORT $LN15@Inverse

; 356  :             {
; 357  :                 Result[3][i] *= Factor;

  00339	b2 03		 mov	 dl, 3
  0033b	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  00343	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  00348	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR i$8[rsp]
  0034d	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00351	48 89 44 24 70	 mov	 QWORD PTR tv205[rsp], rax
  00356	48 8b 44 24 70	 mov	 rax, QWORD PTR tv205[rsp]
  0035b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0035f	f3 0f 59 44 24
	48		 mulss	 xmm0, DWORD PTR Factor$11[rsp]
  00365	48 8b 44 24 70	 mov	 rax, QWORD PTR tv205[rsp]
  0036a	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 358  :             }

  0036e	eb b8		 jmp	 SHORT $LN14@Inverse
$LN15@Inverse:
$LN28@Inverse:

; 359  :         }
; 360  : 
; 361  :         //Neutralize columns upwards
; 362  :         for(int n = 3; n >= 1; n--)

  00370	c7 44 24 24 03
	00 00 00	 mov	 DWORD PTR n$2[rsp], 3
  00378	eb 0a		 jmp	 SHORT $LN19@Inverse
$LN17@Inverse:
  0037a	8b 44 24 24	 mov	 eax, DWORD PTR n$2[rsp]
  0037e	ff c8		 dec	 eax
  00380	89 44 24 24	 mov	 DWORD PTR n$2[rsp], eax
$LN19@Inverse:
  00384	83 7c 24 24 01	 cmp	 DWORD PTR n$2[rsp], 1
  00389	0f 8c 0f 01 00
	00		 jl	 $LN18@Inverse

; 363  :         {
; 364  :             for(int i = n - 1; i >= 0; i--)

  0038f	8b 44 24 24	 mov	 eax, DWORD PTR n$2[rsp]
  00393	ff c8		 dec	 eax
  00395	89 44 24 30	 mov	 DWORD PTR i$5[rsp], eax
  00399	eb 0a		 jmp	 SHORT $LN22@Inverse
$LN20@Inverse:
  0039b	8b 44 24 30	 mov	 eax, DWORD PTR i$5[rsp]
  0039f	ff c8		 dec	 eax
  003a1	89 44 24 30	 mov	 DWORD PTR i$5[rsp], eax
$LN22@Inverse:
  003a5	83 7c 24 30 00	 cmp	 DWORD PTR i$5[rsp], 0
  003aa	0f 8c e9 00 00
	00		 jl	 $LN21@Inverse

; 365  :             {
; 366  :                 if(Temp[i][n] != 0)

  003b0	0f b6 54 24 30	 movzx	 edx, BYTE PTR i$5[rsp]
  003b5	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  003bd	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  003c2	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$2[rsp]
  003c7	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  003cc	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  003d3	7a 06		 jp	 SHORT $LN31@Inverse
  003d5	0f 84 b9 00 00
	00		 je	 $LN29@Inverse
$LN31@Inverse:

; 367  :                 {
; 368  :                     float Factor = Temp[i][n];

  003db	0f b6 54 24 30	 movzx	 edx, BYTE PTR i$5[rsp]
  003e0	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  003e8	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  003ed	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$2[rsp]
  003f2	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  003f7	f3 0f 11 44 24
	4c		 movss	 DWORD PTR Factor$12[rsp], xmm0

; 369  :                     Temp[i][n] = 0;

  003fd	0f b6 54 24 30	 movzx	 edx, BYTE PTR i$5[rsp]
  00402	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  0040a	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  0040f	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$2[rsp]
  00414	0f 57 c0	 xorps	 xmm0, xmm0
  00417	f3 0f 11 04 88	 movss	 DWORD PTR [rax+rcx*4], xmm0

; 370  :                     for(int j = 0; j < 4; j++)

  0041c	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR j$7[rsp], 0
  00424	eb 0a		 jmp	 SHORT $LN25@Inverse
$LN23@Inverse:
  00426	8b 44 24 38	 mov	 eax, DWORD PTR j$7[rsp]
  0042a	ff c0		 inc	 eax
  0042c	89 44 24 38	 mov	 DWORD PTR j$7[rsp], eax
$LN25@Inverse:
  00430	83 7c 24 38 04	 cmp	 DWORD PTR j$7[rsp], 4
  00435	7d 5d		 jge	 SHORT $LN24@Inverse

; 371  :                     {
; 372  :                         Result[i][j] -= Result[n][j]*Factor;

  00437	0f b6 54 24 30	 movzx	 edx, BYTE PTR i$5[rsp]
  0043c	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  00444	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  00449	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR j$7[rsp]
  0044e	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00452	48 89 44 24 78	 mov	 QWORD PTR tv246[rsp], rax
  00457	0f b6 54 24 24	 movzx	 edx, BYTE PTR n$2[rsp]
  0045c	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  00464	e8 00 00 00 00	 call	 ??A?$Matrix44@M@@QEAAPEAME@Z ; Matrix44<float>::operator[]
  00469	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR j$7[rsp]
  0046e	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [rax+rcx*4]
  00473	f3 0f 59 44 24
	4c		 mulss	 xmm0, DWORD PTR Factor$12[rsp]
  00479	48 8b 44 24 78	 mov	 rax, QWORD PTR tv246[rsp]
  0047e	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00482	f3 0f 5c c8	 subss	 xmm1, xmm0
  00486	0f 28 c1	 movaps	 xmm0, xmm1
  00489	48 8b 44 24 78	 mov	 rax, QWORD PTR tv246[rsp]
  0048e	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 373  :                     }

  00492	eb 92		 jmp	 SHORT $LN23@Inverse
$LN24@Inverse:
$LN29@Inverse:

; 374  :                 }
; 375  :             }

  00494	e9 02 ff ff ff	 jmp	 $LN20@Inverse
$LN21@Inverse:

; 376  :         }

  00499	e9 dc fe ff ff	 jmp	 $LN17@Inverse
$LN18@Inverse:

; 377  : 
; 378  :         return Result;

  0049e	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR Result$[rsp]
  004a6	48 8b bc 24 38
	01 00 00	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  004ae	48 8b f0	 mov	 rsi, rax
  004b1	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  004b6	f3 a4		 rep movsb
  004b8	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 379  :     }

  004c0	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004c8	48 33 cc	 xor	 rcx, rsp
  004cb	e8 00 00 00 00	 call	 __security_check_cookie
  004d0	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  004d7	5f		 pop	 rdi
  004d8	5e		 pop	 rsi
  004d9	c3		 ret	 0
?Inverse@?$Matrix44@M@@QEAA?AV1@XZ ENDP			; Matrix44<float>::Inverse
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ??A?$Matrix44@M@@QEAAPEAME@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??A?$Matrix44@M@@QEAAPEAME@Z PROC			; Matrix44<float>::operator[], COMDAT

; 238  :     {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 239  :         return x[i];

  00009	0f b6 44 24 10	 movzx	 eax, BYTE PTR i$[rsp]
  0000e	48 6b c0 10	 imul	 rax, rax, 16
  00012	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00017	48 03 c8	 add	 rcx, rax
  0001a	48 8b c1	 mov	 rax, rcx

; 240  :     }

  0001d	c3		 ret	 0
??A?$Matrix44@M@@QEAAPEAME@Z ENDP			; Matrix44<float>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ??0?$Matrix44@M@@QEAA@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
b$ = 24
c$ = 32
d$ = 40
e$ = 48
f$ = 56
g$ = 64
h$ = 72
i$ = 80
j$ = 88
k$ = 96
l$ = 104
m$ = 112
n$ = 120
o$ = 128
p$ = 136
??0?$Matrix44@M@@QEAA@MMMMMMMMMMMMMMMM@Z PROC		; Matrix44<float>::Matrix44<float>, COMDAT

; 226  :     Matrix44(T a, T b, T c, T d,

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 189  :     T x[4][4] = {{1, 0, 0, 0}, 

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00024	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00028	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00035	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0003a	0f 57 c0	 xorps	 xmm0, xmm0
  0003d	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00042	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00047	0f 57 c0	 xorps	 xmm0, xmm0
  0004a	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  0004f	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
  0005c	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00069	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0
  0006e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00073	0f 57 c0	 xorps	 xmm0, xmm0
  00076	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0
  0007b	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00080	0f 57 c0	 xorps	 xmm0, xmm0
  00083	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0
  00088	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0008d	0f 57 c0	 xorps	 xmm0, xmm0
  00090	f3 0f 11 40 20	 movss	 DWORD PTR [rax+32], xmm0
  00095	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0009a	0f 57 c0	 xorps	 xmm0, xmm0
  0009d	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0
  000a2	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000af	f3 0f 11 40 28	 movss	 DWORD PTR [rax+40], xmm0
  000b4	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000b9	0f 57 c0	 xorps	 xmm0, xmm0
  000bc	f3 0f 11 40 2c	 movss	 DWORD PTR [rax+44], xmm0
  000c1	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000c6	0f 57 c0	 xorps	 xmm0, xmm0
  000c9	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0
  000ce	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000d3	0f 57 c0	 xorps	 xmm0, xmm0
  000d6	f3 0f 11 40 34	 movss	 DWORD PTR [rax+52], xmm0
  000db	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000e0	0f 57 c0	 xorps	 xmm0, xmm0
  000e3	f3 0f 11 40 38	 movss	 DWORD PTR [rax+56], xmm0
  000e8	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f5	f3 0f 11 40 3c	 movss	 DWORD PTR [rax+60], xmm0

; 227  :             T e, T f, T g, T h,
; 228  :             T i, T j, T k, T l,
; 229  :             T m, T n, T o, T p)
; 230  :     {
; 231  :         x[0][0] = a; x[0][1] = b; x[0][2] = c; x[0][3] = d;

  000fa	b8 10 00 00 00	 mov	 eax, 16
  000ff	48 6b c0 00	 imul	 rax, rax, 0
  00103	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00108	48 03 c8	 add	 rcx, rax
  0010b	48 8b c1	 mov	 rax, rcx
  0010e	b9 04 00 00 00	 mov	 ecx, 4
  00113	48 6b c9 00	 imul	 rcx, rcx, 0
  00117	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR a$[rsp]
  0011d	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  00122	b8 10 00 00 00	 mov	 eax, 16
  00127	48 6b c0 00	 imul	 rax, rax, 0
  0012b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00130	48 03 c8	 add	 rcx, rax
  00133	48 8b c1	 mov	 rax, rcx
  00136	b9 04 00 00 00	 mov	 ecx, 4
  0013b	48 6b c9 01	 imul	 rcx, rcx, 1
  0013f	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR b$[rsp]
  00145	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  0014a	b8 10 00 00 00	 mov	 eax, 16
  0014f	48 6b c0 00	 imul	 rax, rax, 0
  00153	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00158	48 03 c8	 add	 rcx, rax
  0015b	48 8b c1	 mov	 rax, rcx
  0015e	b9 04 00 00 00	 mov	 ecx, 4
  00163	48 6b c9 02	 imul	 rcx, rcx, 2
  00167	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR c$[rsp]
  0016d	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  00172	b8 10 00 00 00	 mov	 eax, 16
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00180	48 03 c8	 add	 rcx, rax
  00183	48 8b c1	 mov	 rax, rcx
  00186	b9 04 00 00 00	 mov	 ecx, 4
  0018b	48 6b c9 03	 imul	 rcx, rcx, 3
  0018f	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR d$[rsp]
  00195	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 232  :         x[1][0] = e; x[1][1] = f; x[1][2] = g; x[1][3] = h;

  0019a	b8 10 00 00 00	 mov	 eax, 16
  0019f	48 6b c0 01	 imul	 rax, rax, 1
  001a3	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  001a8	48 03 c8	 add	 rcx, rax
  001ab	48 8b c1	 mov	 rax, rcx
  001ae	b9 04 00 00 00	 mov	 ecx, 4
  001b3	48 6b c9 00	 imul	 rcx, rcx, 0
  001b7	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR e$[rsp]
  001bd	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  001c2	b8 10 00 00 00	 mov	 eax, 16
  001c7	48 6b c0 01	 imul	 rax, rax, 1
  001cb	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  001d0	48 03 c8	 add	 rcx, rax
  001d3	48 8b c1	 mov	 rax, rcx
  001d6	b9 04 00 00 00	 mov	 ecx, 4
  001db	48 6b c9 01	 imul	 rcx, rcx, 1
  001df	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR f$[rsp]
  001e5	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  001ea	b8 10 00 00 00	 mov	 eax, 16
  001ef	48 6b c0 01	 imul	 rax, rax, 1
  001f3	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  001f8	48 03 c8	 add	 rcx, rax
  001fb	48 8b c1	 mov	 rax, rcx
  001fe	b9 04 00 00 00	 mov	 ecx, 4
  00203	48 6b c9 02	 imul	 rcx, rcx, 2
  00207	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR g$[rsp]
  0020d	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  00212	b8 10 00 00 00	 mov	 eax, 16
  00217	48 6b c0 01	 imul	 rax, rax, 1
  0021b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00220	48 03 c8	 add	 rcx, rax
  00223	48 8b c1	 mov	 rax, rcx
  00226	b9 04 00 00 00	 mov	 ecx, 4
  0022b	48 6b c9 03	 imul	 rcx, rcx, 3
  0022f	f3 0f 10 44 24
	48		 movss	 xmm0, DWORD PTR h$[rsp]
  00235	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 233  :         x[2][0] = i; x[2][1] = j; x[2][2] = k; x[2][3] = l;

  0023a	b8 10 00 00 00	 mov	 eax, 16
  0023f	48 6b c0 02	 imul	 rax, rax, 2
  00243	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00248	48 03 c8	 add	 rcx, rax
  0024b	48 8b c1	 mov	 rax, rcx
  0024e	b9 04 00 00 00	 mov	 ecx, 4
  00253	48 6b c9 00	 imul	 rcx, rcx, 0
  00257	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR i$[rsp]
  0025d	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  00262	b8 10 00 00 00	 mov	 eax, 16
  00267	48 6b c0 02	 imul	 rax, rax, 2
  0026b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00270	48 03 c8	 add	 rcx, rax
  00273	48 8b c1	 mov	 rax, rcx
  00276	b9 04 00 00 00	 mov	 ecx, 4
  0027b	48 6b c9 01	 imul	 rcx, rcx, 1
  0027f	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR j$[rsp]
  00285	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  0028a	b8 10 00 00 00	 mov	 eax, 16
  0028f	48 6b c0 02	 imul	 rax, rax, 2
  00293	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00298	48 03 c8	 add	 rcx, rax
  0029b	48 8b c1	 mov	 rax, rcx
  0029e	b9 04 00 00 00	 mov	 ecx, 4
  002a3	48 6b c9 02	 imul	 rcx, rcx, 2
  002a7	f3 0f 10 44 24
	60		 movss	 xmm0, DWORD PTR k$[rsp]
  002ad	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  002b2	b8 10 00 00 00	 mov	 eax, 16
  002b7	48 6b c0 02	 imul	 rax, rax, 2
  002bb	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  002c0	48 03 c8	 add	 rcx, rax
  002c3	48 8b c1	 mov	 rax, rcx
  002c6	b9 04 00 00 00	 mov	 ecx, 4
  002cb	48 6b c9 03	 imul	 rcx, rcx, 3
  002cf	f3 0f 10 44 24
	68		 movss	 xmm0, DWORD PTR l$[rsp]
  002d5	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 234  :         x[3][0] = m; x[3][1] = n; x[3][2] = o; x[3][3] = p;

  002da	b8 10 00 00 00	 mov	 eax, 16
  002df	48 6b c0 03	 imul	 rax, rax, 3
  002e3	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  002e8	48 03 c8	 add	 rcx, rax
  002eb	48 8b c1	 mov	 rax, rcx
  002ee	b9 04 00 00 00	 mov	 ecx, 4
  002f3	48 6b c9 00	 imul	 rcx, rcx, 0
  002f7	f3 0f 10 44 24
	70		 movss	 xmm0, DWORD PTR m$[rsp]
  002fd	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  00302	b8 10 00 00 00	 mov	 eax, 16
  00307	48 6b c0 03	 imul	 rax, rax, 3
  0030b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00310	48 03 c8	 add	 rcx, rax
  00313	48 8b c1	 mov	 rax, rcx
  00316	b9 04 00 00 00	 mov	 ecx, 4
  0031b	48 6b c9 01	 imul	 rcx, rcx, 1
  0031f	f3 0f 10 44 24
	78		 movss	 xmm0, DWORD PTR n$[rsp]
  00325	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  0032a	b8 10 00 00 00	 mov	 eax, 16
  0032f	48 6b c0 03	 imul	 rax, rax, 3
  00333	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00338	48 03 c8	 add	 rcx, rax
  0033b	48 8b c1	 mov	 rax, rcx
  0033e	b9 04 00 00 00	 mov	 ecx, 4
  00343	48 6b c9 02	 imul	 rcx, rcx, 2
  00347	f3 0f 10 84 24
	80 00 00 00	 movss	 xmm0, DWORD PTR o$[rsp]
  00350	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0
  00355	b8 10 00 00 00	 mov	 eax, 16
  0035a	48 6b c0 03	 imul	 rax, rax, 3
  0035e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00363	48 03 c8	 add	 rcx, rax
  00366	48 8b c1	 mov	 rax, rcx
  00369	b9 04 00 00 00	 mov	 ecx, 4
  0036e	48 6b c9 03	 imul	 rcx, rcx, 3
  00372	f3 0f 10 84 24
	88 00 00 00	 movss	 xmm0, DWORD PTR p$[rsp]
  0037b	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 235  :     }

  00380	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00385	c3		 ret	 0
??0?$Matrix44@M@@QEAA@MMMMMMMMMMMMMMMM@Z ENDP		; Matrix44<float>::Matrix44<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ??0?$Matrix44@M@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$Matrix44@M@@QEAA@XZ PROC				; Matrix44<float>::Matrix44<float>, COMDAT

; 224  :     Matrix44() {};

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 189  :     T x[4][4] = {{1, 0, 0, 0}, 

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00012	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00016	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001b	0f 57 c0	 xorps	 xmm0, xmm0
  0001e	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00023	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00030	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  0003d	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00042	0f 57 c0	 xorps	 xmm0, xmm0
  00045	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
  0004a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00057	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0
  0005c	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0
  00069	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0006e	0f 57 c0	 xorps	 xmm0, xmm0
  00071	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0
  00076	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0007b	0f 57 c0	 xorps	 xmm0, xmm0
  0007e	f3 0f 11 40 20	 movss	 DWORD PTR [rax+32], xmm0
  00083	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0
  00090	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0009d	f3 0f 11 40 28	 movss	 DWORD PTR [rax+40], xmm0
  000a2	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000a7	0f 57 c0	 xorps	 xmm0, xmm0
  000aa	f3 0f 11 40 2c	 movss	 DWORD PTR [rax+44], xmm0
  000af	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 11 40 30	 movss	 DWORD PTR [rax+48], xmm0
  000bc	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000c1	0f 57 c0	 xorps	 xmm0, xmm0
  000c4	f3 0f 11 40 34	 movss	 DWORD PTR [rax+52], xmm0
  000c9	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000ce	0f 57 c0	 xorps	 xmm0, xmm0
  000d1	f3 0f 11 40 38	 movss	 DWORD PTR [rax+56], xmm0
  000d6	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000e3	f3 0f 11 40 3c	 movss	 DWORD PTR [rax+60], xmm0

; 224  :     Matrix44() {};

  000e8	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000ed	c3		 ret	 0
??0?$Matrix44@M@@QEAA@XZ ENDP				; Matrix44<float>::Matrix44<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ?CrossProduct@?$Vec3@M@@QEAA?AV1@AEAV1@@Z
_TEXT	SEGMENT
tv88 = 32
this$ = 64
__$ReturnUdt$ = 72
v$ = 80
?CrossProduct@?$Vec3@M@@QEAA?AV1@AEAV1@@Z PROC		; Vec3<float>::CrossProduct, COMDAT

; 151  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 152  :         return Vec3(y * v.z - v.y * z, z * v.x - v.z * x, x * v.y - v.x * y);

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0001d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00021	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [rcx+4]
  00026	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00030	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00034	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [rcx+4]
  00039	f3 0f 5c c1	 subss	 xmm0, xmm1
  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00047	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  0004c	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [rcx]
  00050	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  00055	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [rax+8]
  0005f	f3 0f 59 11	 mulss	 xmm2, DWORD PTR [rcx]
  00063	f3 0f 5c ca	 subss	 xmm1, xmm2
  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00071	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00076	f3 0f 59 51 08	 mulss	 xmm2, DWORD PTR [rcx+8]
  0007b	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  00080	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00085	f3 0f 10 58 04	 movss	 xmm3, DWORD PTR [rax+4]
  0008a	f3 0f 59 59 08	 mulss	 xmm3, DWORD PTR [rcx+8]
  0008f	f3 0f 5c d3	 subss	 xmm2, xmm3
  00093	f3 0f 11 54 24
	20		 movss	 DWORD PTR tv88[rsp], xmm2
  00099	0f 28 d8	 movaps	 xmm3, xmm0
  0009c	0f 28 d1	 movaps	 xmm2, xmm1
  0009f	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR tv88[rsp]
  000a5	0f 28 c8	 movaps	 xmm1, xmm0
  000a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000ad	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>
  000b2	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 153  :     }

  000b7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bb	c3		 ret	 0
?CrossProduct@?$Vec3@M@@QEAA?AV1@AEAV1@@Z ENDP		; Vec3<float>::CrossProduct
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ??0?$Vec3@M@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 8
xx$ = 16
yy$ = 24
zz$ = 32
??0?$Vec3@M@@QEAA@MMM@Z PROC				; Vec3<float>::Vec3<float>, COMDAT

; 108  :     Vec3(T xx, T yy, T zz) : x(xx), y(yy), z(zz) {};

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001c	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR xx$[rsp]
  00022	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00026	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002b	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR yy$[rsp]
  00031	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00036	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0003b	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR zz$[rsp]
  00041	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00046	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0004b	c3		 ret	 0
??0?$Vec3@M@@QEAA@MMM@Z ENDP				; Vec3<float>::Vec3<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\geometry.h
;	COMDAT ??0?$Vec3@M@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$Vec3@M@@QEAA@XZ PROC				; Vec3<float>::Vec3<float>, COMDAT

; 106  :     Vec3() : x(0), y(0), z(0) {};

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  0001e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00023	0f 57 c0	 xorps	 xmm0, xmm0
  00026	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  0002b	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00030	c3		 ret	 0
??0?$Vec3@M@@QEAA@XZ ENDP				; Vec3<float>::Vec3<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\repos\TFG\code\win32_renderer.cpp
_TEXT	SEGMENT
RotAngle$1 = 144
i$2 = 148
i$3 = 152
ObjScale$4 = 156
Height$5 = 160
Width$6 = 164
Window$7 = 168
tv277 = 176
tv281 = 180
tv291 = 184
tv308 = 188
tv315 = 192
tv319 = 196
p1$8 = 200
p0$9 = 208
p2$10 = 216
Dimension$11 = 224
DeviceContext$12 = 232
ObjPos$13 = 240
XOffset$14 = 256
YOffset$15 = 260
Red$16 = 264
Green$17 = 268
Blue$18 = 272
NumTris$19 = 276
$T20 = 280
temp$21 = 288
v0$22 = 304
v1$23 = 320
v2$24 = 336
WindowClass$ = 352
Message$25 = 432
$T26 = 480
$T27 = 560
$T28 = 640
$T29 = 720
$T30 = 800
$T31 = 880
$T32 = 976
$T33 = 1072
Camera$34 = 1168
WorldToCamera$35 = 1264
RotYMatrix$36 = 1328
RotMatrix$37 = 1392
TranslMatrix$38 = 1456
RotZMatrix$39 = 1520
$T40 = 1584
Tris$41 = 1648
Verts$42 = 1792
ModVerts$43 = 1888
__$ArrayPad$ = 1984
hInstance$ = 2032
hPrevInstance$ = 2040
lpCmdLine$ = 2048
nCmdShow$ = 2056
WinMain	PROC

; 390  : {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 07
	00 00		 sub	 rsp, 2008		; 000007d8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 c0
	07 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 391  :     //Declare Windows class struct and initialize to 0
; 392  :     WNDCLASS WindowClass = {0};

  0002f	48 8d 84 24 60
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	33 c0		 xor	 eax, eax
  0003c	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00041	f3 aa		 rep stosb

; 393  : 
; 394  :     Win32ResizeDIBSection(&GlobalBackbuffer, 1200, 720);

  00043	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  00049	ba b0 04 00 00	 mov	 edx, 1200		; 000004b0H
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A ; GlobalBackbuffer
  00055	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 395  : 
; 396  :     WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  0005a	c7 84 24 60 01
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 397  :     WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  0006c	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 398  :     WindowClass.hInstance = hInstance;

  00074	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  0007c	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 399  :     WindowClass.lpszClassName = "RendererWindowClass";

  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG119352
  0008b	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 400  : 
; 401  :     //Register window class to create a window later
; 402  :     if(RegisterClass(&WindowClass))

  00093	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  000a1	0f b7 c0	 movzx	 eax, ax
  000a4	85 c0		 test	 eax, eax
  000a6	0f 84 69 0c 00
	00		 je	 $LN12@WinMain

; 403  :     {
; 404  :         //Create window and sotre window handle
; 405  :         HWND Window =

  000ac	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000b5	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  000bd	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000c2	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000cb	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000d4	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000dc	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000e4	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000ec	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000f4	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG119355
  00101	48 8b 94 24 a0
	01 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  00109	33 c9		 xor	 ecx, ecx
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00111	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR Window$7[rsp], rax

; 406  :              CreateWindowEx(0,
; 407  :                             WindowClass.lpszClassName,
; 408  :                             "Renderer",
; 409  :                             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 410  :                             CW_USEDEFAULT,
; 411  :                             CW_USEDEFAULT,
; 412  :                             CW_USEDEFAULT,
; 413  :                             CW_USEDEFAULT,
; 414  :                             0,
; 415  :                             0,
; 416  :                             hInstance,
; 417  :                             0);
; 418  : 
; 419  :         if(Window != NULL)

  00119	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR Window$7[rsp], 0
  00122	0f 84 ed 0b 00
	00		 je	 $LN14@WinMain

; 420  :         {
; 421  :             int XOffset = 0;

  00128	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR XOffset$14[rsp], 0

; 422  :             int YOffset = 0;

  00133	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR YOffset$15[rsp], 0

; 423  : 
; 424  :             int Red = 255;

  0013e	c7 84 24 08 01
	00 00 ff 00 00
	00		 mov	 DWORD PTR Red$16[rsp], 255 ; 000000ffH

; 425  :             int Green = 0;

  00149	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Green$17[rsp], 0

; 426  :             int Blue = 0;

  00154	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Blue$18[rsp], 0

; 427  :             //Main window loop
; 428  :             GlobalRunning = true;

  0015f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 1 ; GlobalRunning

; 429  :             
; 430  :             /*
; 431  :             Vec3f Verts[6] = {
; 432  :                 {0, 0, 0}, {1, 1, 0}, {0, 1, 1}, {-1, 1, 0}, {0, 1, -1}, {0, 2, 0}
; 433  :             };
; 434  : 
; 435  :             const int NumTris = 8;
; 436  : 
; 437  :             uint32_t Tris[NumTris * 3] = 
; 438  :             {0, 1, 2, 
; 439  :             0, 1, 4,
; 440  :             0, 3, 4,
; 441  :             0, 2, 3,
; 442  :             5, 1, 2,
; 443  :             5, 1, 4,
; 444  :             5, 3, 4,
; 445  :             5, 3, 2};
; 446  :             */
; 447  : 
; 448  :             Vec3f Verts[8] = {
; 449  :                 {1, 1, 1}, {1, -1, 1}, {-1, -1, 1}, {-1, 1, 1},

  00166	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0016e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00176	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0017e	48 8d 8c 24 00
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp]
  00186	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>
  0018b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00193	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  0019b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001a3	48 8d 8c 24 0c
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp+12]
  001ab	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>
  001b0	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  001b8	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  001c0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001c8	48 8d 8c 24 18
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp+24]
  001d0	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>
  001d5	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  001dd	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  001e5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001ed	48 8d 8c 24 24
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp+36]
  001f5	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>

; 450  :                 {1, 1, -1}, {1, -1, -1}, {-1, -1, -1}, {-1, 1, -1}

  001fa	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@bf800000
  00202	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0020a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00212	48 8d 8c 24 30
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp+48]
  0021a	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>
  0021f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@bf800000
  00227	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  0022f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00237	48 8d 8c 24 3c
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp+60]
  0023f	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>
  00244	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@bf800000
  0024c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  00254	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0025c	48 8d 8c 24 48
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp+72]
  00264	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>
  00269	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@bf800000
  00271	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00279	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00281	48 8d 8c 24 54
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp+84]
  00289	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>

; 451  :             };
; 452  : 
; 453  :             const int NumTris = 12;

  0028e	c7 84 24 14 01
	00 00 0c 00 00
	00		 mov	 DWORD PTR NumTris$19[rsp], 12

; 454  : 
; 455  :             uint32_t Tris[NumTris * 3] = 
; 456  :             {0, 1, 2,   2, 3, 0,

  00299	c7 84 24 70 06
	00 00 00 00 00
	00		 mov	 DWORD PTR Tris$41[rsp], 0
  002a4	c7 84 24 74 06
	00 00 01 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+4], 1
  002af	c7 84 24 78 06
	00 00 02 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+8], 2
  002ba	c7 84 24 7c 06
	00 00 02 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+12], 2
  002c5	c7 84 24 80 06
	00 00 03 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+16], 3
  002d0	c7 84 24 84 06
	00 00 00 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+20], 0

; 457  :             0, 4, 1,    4, 5, 1,

  002db	c7 84 24 88 06
	00 00 00 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+24], 0
  002e6	c7 84 24 8c 06
	00 00 04 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+28], 4
  002f1	c7 84 24 90 06
	00 00 01 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+32], 1
  002fc	c7 84 24 94 06
	00 00 04 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+36], 4
  00307	c7 84 24 98 06
	00 00 05 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+40], 5
  00312	c7 84 24 9c 06
	00 00 01 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+44], 1

; 458  :             5, 1, 2,    2, 6, 5,

  0031d	c7 84 24 a0 06
	00 00 05 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+48], 5
  00328	c7 84 24 a4 06
	00 00 01 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+52], 1
  00333	c7 84 24 a8 06
	00 00 02 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+56], 2
  0033e	c7 84 24 ac 06
	00 00 02 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+60], 2
  00349	c7 84 24 b0 06
	00 00 06 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+64], 6
  00354	c7 84 24 b4 06
	00 00 05 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+68], 5

; 459  :             3, 2, 6,    6, 7, 3,

  0035f	c7 84 24 b8 06
	00 00 03 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+72], 3
  0036a	c7 84 24 bc 06
	00 00 02 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+76], 2
  00375	c7 84 24 c0 06
	00 00 06 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+80], 6
  00380	c7 84 24 c4 06
	00 00 06 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+84], 6
  0038b	c7 84 24 c8 06
	00 00 07 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+88], 7
  00396	c7 84 24 cc 06
	00 00 03 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+92], 3

; 460  :             4, 0, 3,    3, 7, 4,

  003a1	c7 84 24 d0 06
	00 00 04 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+96], 4
  003ac	c7 84 24 d4 06
	00 00 00 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+100], 0
  003b7	c7 84 24 d8 06
	00 00 03 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+104], 3
  003c2	c7 84 24 dc 06
	00 00 03 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+108], 3
  003cd	c7 84 24 e0 06
	00 00 07 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+112], 7
  003d8	c7 84 24 e4 06
	00 00 04 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+116], 4

; 461  :             4, 5, 6,    6, 7, 4};

  003e3	c7 84 24 e8 06
	00 00 04 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+120], 4
  003ee	c7 84 24 ec 06
	00 00 05 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+124], 5
  003f9	c7 84 24 f0 06
	00 00 06 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+128], 6
  00404	c7 84 24 f4 06
	00 00 06 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+132], 6
  0040f	c7 84 24 f8 06
	00 00 07 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+136], 7
  0041a	c7 84 24 fc 06
	00 00 04 00 00
	00		 mov	 DWORD PTR Tris$41[rsp+140], 4

; 462  : 
; 463  :             Vec3f ObjPos(0, 0, 10);

  00425	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41200000
  0042d	0f 57 d2	 xorps	 xmm2, xmm2
  00430	0f 57 c9	 xorps	 xmm1, xmm1
  00433	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR ObjPos$13[rsp]
  0043b	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@MMM@Z	; Vec3<float>::Vec3<float>

; 464  :             float ObjScale = 1;

  00440	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00448	f3 0f 11 84 24
	9c 00 00 00	 movss	 DWORD PTR ObjScale$4[rsp], xmm0

; 465  :             Matrix44f TranslMatrix(ObjScale, 0, 0, 0,

  00451	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00459	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR [rsp+128], xmm0
  00462	f3 0f 10 84 24
	f8 00 00 00	 movss	 xmm0, DWORD PTR ObjPos$13[rsp+8]
  0046b	f3 0f 11 44 24
	78		 movss	 DWORD PTR [rsp+120], xmm0
  00471	f3 0f 10 84 24
	f4 00 00 00	 movss	 xmm0, DWORD PTR ObjPos$13[rsp+4]
  0047a	f3 0f 11 44 24
	70		 movss	 DWORD PTR [rsp+112], xmm0
  00480	f3 0f 10 84 24
	f0 00 00 00	 movss	 xmm0, DWORD PTR ObjPos$13[rsp]
  00489	f3 0f 11 44 24
	68		 movss	 DWORD PTR [rsp+104], xmm0
  0048f	0f 57 c0	 xorps	 xmm0, xmm0
  00492	f3 0f 11 44 24
	60		 movss	 DWORD PTR [rsp+96], xmm0
  00498	f3 0f 10 84 24
	9c 00 00 00	 movss	 xmm0, DWORD PTR ObjScale$4[rsp]
  004a1	f3 0f 11 44 24
	58		 movss	 DWORD PTR [rsp+88], xmm0
  004a7	0f 57 c0	 xorps	 xmm0, xmm0
  004aa	f3 0f 11 44 24
	50		 movss	 DWORD PTR [rsp+80], xmm0
  004b0	0f 57 c0	 xorps	 xmm0, xmm0
  004b3	f3 0f 11 44 24
	48		 movss	 DWORD PTR [rsp+72], xmm0
  004b9	0f 57 c0	 xorps	 xmm0, xmm0
  004bc	f3 0f 11 44 24
	40		 movss	 DWORD PTR [rsp+64], xmm0
  004c2	0f 57 c0	 xorps	 xmm0, xmm0
  004c5	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  004cb	f3 0f 10 84 24
	9c 00 00 00	 movss	 xmm0, DWORD PTR ObjScale$4[rsp]
  004d4	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  004da	0f 57 c0	 xorps	 xmm0, xmm0
  004dd	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  004e3	0f 57 c0	 xorps	 xmm0, xmm0
  004e6	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  004ec	0f 57 db	 xorps	 xmm3, xmm3
  004ef	0f 57 d2	 xorps	 xmm2, xmm2
  004f2	f3 0f 10 8c 24
	9c 00 00 00	 movss	 xmm1, DWORD PTR ObjScale$4[rsp]
  004fb	48 8d 8c 24 b0
	05 00 00	 lea	 rcx, QWORD PTR TranslMatrix$38[rsp]
  00503	e8 00 00 00 00	 call	 ??0?$Matrix44@M@@QEAA@MMMMMMMMMMMMMMMM@Z ; Matrix44<float>::Matrix44<float>

; 466  :                                   0, ObjScale, 0, 0,
; 467  :                                   0, 0, ObjScale, 0, 
; 468  :                                   ObjPos.x, ObjPos.y, ObjPos.z, 1);
; 469  :             float RotAngle = 0.001f;

  00508	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3a83126f
  00510	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR RotAngle$1[rsp], xmm0

; 470  :             Matrix44f RotYMatrix(cosf(RotAngle),     0,  -sinf(RotAngle),     0,

  00519	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR RotAngle$1[rsp]
  00522	e8 00 00 00 00	 call	 cosf
  00527	f3 0f 11 84 24
	b0 00 00 00	 movss	 DWORD PTR tv277[rsp], xmm0
  00530	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR RotAngle$1[rsp]
  00539	e8 00 00 00 00	 call	 sinf
  0053e	f3 0f 11 84 24
	b4 00 00 00	 movss	 DWORD PTR tv281[rsp], xmm0
  00547	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR RotAngle$1[rsp]
  00550	e8 00 00 00 00	 call	 sinf
  00555	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0055c	f3 0f 11 84 24
	b8 00 00 00	 movss	 DWORD PTR tv291[rsp], xmm0
  00565	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR RotAngle$1[rsp]
  0056e	e8 00 00 00 00	 call	 cosf
  00573	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0057b	f3 0f 11 8c 24
	80 00 00 00	 movss	 DWORD PTR [rsp+128], xmm1
  00584	0f 57 c9	 xorps	 xmm1, xmm1
  00587	f3 0f 11 4c 24
	78		 movss	 DWORD PTR [rsp+120], xmm1
  0058d	0f 57 c9	 xorps	 xmm1, xmm1
  00590	f3 0f 11 4c 24
	70		 movss	 DWORD PTR [rsp+112], xmm1
  00596	0f 57 c9	 xorps	 xmm1, xmm1
  00599	f3 0f 11 4c 24
	68		 movss	 DWORD PTR [rsp+104], xmm1
  0059f	0f 57 c9	 xorps	 xmm1, xmm1
  005a2	f3 0f 11 4c 24
	60		 movss	 DWORD PTR [rsp+96], xmm1
  005a8	f3 0f 10 8c 24
	b0 00 00 00	 movss	 xmm1, DWORD PTR tv277[rsp]
  005b1	f3 0f 11 4c 24
	58		 movss	 DWORD PTR [rsp+88], xmm1
  005b7	0f 57 c9	 xorps	 xmm1, xmm1
  005ba	f3 0f 11 4c 24
	50		 movss	 DWORD PTR [rsp+80], xmm1
  005c0	f3 0f 10 8c 24
	b4 00 00 00	 movss	 xmm1, DWORD PTR tv281[rsp]
  005c9	f3 0f 11 4c 24
	48		 movss	 DWORD PTR [rsp+72], xmm1
  005cf	0f 57 c9	 xorps	 xmm1, xmm1
  005d2	f3 0f 11 4c 24
	40		 movss	 DWORD PTR [rsp+64], xmm1
  005d8	0f 57 c9	 xorps	 xmm1, xmm1
  005db	f3 0f 11 4c 24
	38		 movss	 DWORD PTR [rsp+56], xmm1
  005e1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  005e9	f3 0f 11 4c 24
	30		 movss	 DWORD PTR [rsp+48], xmm1
  005ef	0f 57 c9	 xorps	 xmm1, xmm1
  005f2	f3 0f 11 4c 24
	28		 movss	 DWORD PTR [rsp+40], xmm1
  005f8	0f 57 c9	 xorps	 xmm1, xmm1
  005fb	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  00601	f3 0f 10 8c 24
	b8 00 00 00	 movss	 xmm1, DWORD PTR tv291[rsp]
  0060a	0f 28 d9	 movaps	 xmm3, xmm1
  0060d	0f 57 d2	 xorps	 xmm2, xmm2
  00610	0f 28 c8	 movaps	 xmm1, xmm0
  00613	48 8d 8c 24 30
	05 00 00	 lea	 rcx, QWORD PTR RotYMatrix$36[rsp]
  0061b	e8 00 00 00 00	 call	 ??0?$Matrix44@M@@QEAA@MMMMMMMMMMMMMMMM@Z ; Matrix44<float>::Matrix44<float>

; 471  :                                 0,                  1,                0,     0,
; 472  :                                 sinf(RotAngle),     0,   cosf(RotAngle),     0,
; 473  :                                 0,                  0,                0,     1);
; 474  :             Matrix44f RotZMatrix(cosf(RotAngle*2),    sinf(RotAngle*2),   0,     0,

  00620	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR RotAngle$1[rsp]
  00629	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00631	e8 00 00 00 00	 call	 cosf
  00636	f3 0f 11 84 24
	bc 00 00 00	 movss	 DWORD PTR tv308[rsp], xmm0
  0063f	f3 0f 10 8c 24
	90 00 00 00	 movss	 xmm1, DWORD PTR RotAngle$1[rsp]
  00648	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  00650	0f 28 c1	 movaps	 xmm0, xmm1
  00653	e8 00 00 00 00	 call	 sinf
  00658	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0065f	f3 0f 11 84 24
	c0 00 00 00	 movss	 DWORD PTR tv315[rsp], xmm0
  00668	f3 0f 10 8c 24
	90 00 00 00	 movss	 xmm1, DWORD PTR RotAngle$1[rsp]
  00671	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  00679	0f 28 c1	 movaps	 xmm0, xmm1
  0067c	e8 00 00 00 00	 call	 sinf
  00681	f3 0f 11 84 24
	c4 00 00 00	 movss	 DWORD PTR tv319[rsp], xmm0
  0068a	f3 0f 10 8c 24
	90 00 00 00	 movss	 xmm1, DWORD PTR RotAngle$1[rsp]
  00693	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  0069b	0f 28 c1	 movaps	 xmm0, xmm1
  0069e	e8 00 00 00 00	 call	 cosf
  006a3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  006ab	f3 0f 11 8c 24
	80 00 00 00	 movss	 DWORD PTR [rsp+128], xmm1
  006b4	0f 57 c9	 xorps	 xmm1, xmm1
  006b7	f3 0f 11 4c 24
	78		 movss	 DWORD PTR [rsp+120], xmm1
  006bd	0f 57 c9	 xorps	 xmm1, xmm1
  006c0	f3 0f 11 4c 24
	70		 movss	 DWORD PTR [rsp+112], xmm1
  006c6	0f 57 c9	 xorps	 xmm1, xmm1
  006c9	f3 0f 11 4c 24
	68		 movss	 DWORD PTR [rsp+104], xmm1
  006cf	0f 57 c9	 xorps	 xmm1, xmm1
  006d2	f3 0f 11 4c 24
	60		 movss	 DWORD PTR [rsp+96], xmm1
  006d8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  006e0	f3 0f 11 4c 24
	58		 movss	 DWORD PTR [rsp+88], xmm1
  006e6	0f 57 c9	 xorps	 xmm1, xmm1
  006e9	f3 0f 11 4c 24
	50		 movss	 DWORD PTR [rsp+80], xmm1
  006ef	0f 57 c9	 xorps	 xmm1, xmm1
  006f2	f3 0f 11 4c 24
	48		 movss	 DWORD PTR [rsp+72], xmm1
  006f8	0f 57 c9	 xorps	 xmm1, xmm1
  006fb	f3 0f 11 4c 24
	40		 movss	 DWORD PTR [rsp+64], xmm1
  00701	0f 57 c9	 xorps	 xmm1, xmm1
  00704	f3 0f 11 4c 24
	38		 movss	 DWORD PTR [rsp+56], xmm1
  0070a	f3 0f 10 8c 24
	bc 00 00 00	 movss	 xmm1, DWORD PTR tv308[rsp]
  00713	f3 0f 11 4c 24
	30		 movss	 DWORD PTR [rsp+48], xmm1
  00719	f3 0f 10 8c 24
	c0 00 00 00	 movss	 xmm1, DWORD PTR tv315[rsp]
  00722	f3 0f 11 4c 24
	28		 movss	 DWORD PTR [rsp+40], xmm1
  00728	0f 57 c9	 xorps	 xmm1, xmm1
  0072b	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  00731	0f 57 db	 xorps	 xmm3, xmm3
  00734	f3 0f 10 8c 24
	c4 00 00 00	 movss	 xmm1, DWORD PTR tv319[rsp]
  0073d	0f 28 d1	 movaps	 xmm2, xmm1
  00740	0f 28 c8	 movaps	 xmm1, xmm0
  00743	48 8d 8c 24 f0
	05 00 00	 lea	 rcx, QWORD PTR RotZMatrix$39[rsp]
  0074b	e8 00 00 00 00	 call	 ??0?$Matrix44@M@@QEAA@MMMMMMMMMMMMMMMM@Z ; Matrix44<float>::Matrix44<float>

; 475  :                                 -sinf(RotAngle*2),    cosf(RotAngle*2),   0,     0,
; 476  :                                 0,                  0,                1,     0,
; 477  :                                 0,                  0,                0,     1);      
; 478  : 
; 479  :             Matrix44f RotMatrix = RotYMatrix; 

  00750	48 8d 84 24 70
	05 00 00	 lea	 rax, QWORD PTR RotMatrix$37[rsp]
  00758	48 8d 8c 24 30
	05 00 00	 lea	 rcx, QWORD PTR RotYMatrix$36[rsp]
  00760	48 8b f8	 mov	 rdi, rax
  00763	48 8b f1	 mov	 rsi, rcx
  00766	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0076b	f3 a4		 rep movsb

; 480  :             /*
; 481  :             for(int i = 0; i < 6; i++)
; 482  :             {
; 483  :                 Vec3f temp;
; 484  :                 TransMatrix.MultPointMatrix(Verts[i], temp);
; 485  :                 Verts[i] = temp;
; 486  :             }
; 487  :             */
; 488  : 
; 489  :             render_camera Camera;

  0076d	48 8d 8c 24 90
	04 00 00	 lea	 rcx, QWORD PTR Camera$34[rsp]
  00775	e8 00 00 00 00	 call	 ??0render_camera@@QEAA@XZ

; 490  :             Camera.CameraToWorld = Matrix44f(1, 0, 0, 0, 

  0077a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00782	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR [rsp+128], xmm0
  0078b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00793	f3 0f 11 44 24
	78		 movss	 DWORD PTR [rsp+120], xmm0
  00799	0f 57 c0	 xorps	 xmm0, xmm0
  0079c	f3 0f 11 44 24
	70		 movss	 DWORD PTR [rsp+112], xmm0
  007a2	0f 57 c0	 xorps	 xmm0, xmm0
  007a5	f3 0f 11 44 24
	68		 movss	 DWORD PTR [rsp+104], xmm0
  007ab	0f 57 c0	 xorps	 xmm0, xmm0
  007ae	f3 0f 11 44 24
	60		 movss	 DWORD PTR [rsp+96], xmm0
  007b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007bc	f3 0f 11 44 24
	58		 movss	 DWORD PTR [rsp+88], xmm0
  007c2	0f 57 c0	 xorps	 xmm0, xmm0
  007c5	f3 0f 11 44 24
	50		 movss	 DWORD PTR [rsp+80], xmm0
  007cb	0f 57 c0	 xorps	 xmm0, xmm0
  007ce	f3 0f 11 44 24
	48		 movss	 DWORD PTR [rsp+72], xmm0
  007d4	0f 57 c0	 xorps	 xmm0, xmm0
  007d7	f3 0f 11 44 24
	40		 movss	 DWORD PTR [rsp+64], xmm0
  007dd	0f 57 c0	 xorps	 xmm0, xmm0
  007e0	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  007e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007ee	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  007f4	0f 57 c0	 xorps	 xmm0, xmm0
  007f7	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  007fd	0f 57 c0	 xorps	 xmm0, xmm0
  00800	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00806	0f 57 db	 xorps	 xmm3, xmm3
  00809	0f 57 d2	 xorps	 xmm2, xmm2
  0080c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00814	48 8d 8c 24 30
	06 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  0081c	e8 00 00 00 00	 call	 ??0?$Matrix44@M@@QEAA@MMMMMMMMMMMMMMMM@Z ; Matrix44<float>::Matrix44<float>
  00821	48 8d 8c 24 9c
	04 00 00	 lea	 rcx, QWORD PTR Camera$34[rsp+12]
  00829	48 8b f9	 mov	 rdi, rcx
  0082c	48 8b f0	 mov	 rsi, rax
  0082f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00834	f3 a4		 rep movsb

; 491  :                                             0, 1, 0, 0, 
; 492  :                                             0, 0, -1, 0, 
; 493  :                                             0, 0, 1, 1);
; 494  :             Camera.CanvasDistance = 5;

  00836	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0083e	f3 0f 11 84 24
	dc 04 00 00	 movss	 DWORD PTR Camera$34[rsp+76], xmm0

; 495  :             Camera.CanvasWidth = 16;

  00847	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41800000
  0084f	f3 0f 11 84 24
	e0 04 00 00	 movss	 DWORD PTR Camera$34[rsp+80], xmm0

; 496  :             Camera.CanvasHeight = 9;

  00858	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  00860	f3 0f 11 84 24
	e4 04 00 00	 movss	 DWORD PTR Camera$34[rsp+84], xmm0

; 497  : 
; 498  :             Matrix44f WorldToCamera = Camera.CameraToWorld.Inverse();

  00869	48 8d 94 24 f0
	04 00 00	 lea	 rdx, QWORD PTR WorldToCamera$35[rsp]
  00871	48 8d 8c 24 9c
	04 00 00	 lea	 rcx, QWORD PTR Camera$34[rsp+12]
  00879	e8 00 00 00 00	 call	 ?Inverse@?$Matrix44@M@@QEAA?AV1@XZ ; Matrix44<float>::Inverse
$LN2@WinMain:

; 499  : 
; 500  :             while(GlobalRunning)

  0087e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalRunning@@3_NA ; GlobalRunning
  00885	85 c0		 test	 eax, eax
  00887	0f 84 88 04 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 501  :             {
; 502  :                 
; 503  : 
; 504  :                 //Receive all messages from message queue
; 505  :                 MSG Message;
; 506  :                 while(PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) //Return of 0 means failure to find message

  0088d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00895	45 33 c9	 xor	 r9d, r9d
  00898	45 33 c0	 xor	 r8d, r8d
  0089b	33 d2		 xor	 edx, edx
  0089d	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR Message$25[rsp]
  008a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  008ab	85 c0		 test	 eax, eax
  008ad	74 2f		 je	 SHORT $LN5@WinMain

; 507  :                 {
; 508  :                     if(Message.message == WM_QUIT)

  008af	83 bc 24 b8 01
	00 00 12	 cmp	 DWORD PTR Message$25[rsp+8], 18
  008b7	75 07		 jne	 SHORT $LN16@WinMain

; 509  :                     {
; 510  :                         GlobalRunning = false;

  008b9	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0 ; GlobalRunning
$LN16@WinMain:

; 511  :                     }
; 512  : 
; 513  :                     TranslateMessage(&Message);

  008c0	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR Message$25[rsp]
  008c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 514  :                     DispatchMessage(&Message);

  008ce	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR Message$25[rsp]
  008d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 515  :                 }

  008dc	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 516  : 
; 517  :                 //RenderGradient(GlobalBackbuffer, XOffset, YOffset);
; 518  :                 
; 519  :                 CleanBuffer(GlobalBackbuffer);

  008de	48 8d 84 24 e0
	01 00 00	 lea	 rax, QWORD PTR $T26[rsp]
  008e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A ; GlobalBackbuffer
  008ed	48 8b f8	 mov	 rdi, rax
  008f0	48 8b f1	 mov	 rsi, rcx
  008f3	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  008f8	f3 a4		 rep movsb
  008fa	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00902	e8 00 00 00 00	 call	 ?CleanBuffer@@YAXUwin32_offscreen_buffer@@@Z ; CleanBuffer

; 520  :                 /*
; 521  :                 uint32_t RGB = (uint32_t)((Red << 16) | (Green << 8)) | Blue;
; 522  : 
; 523  :                 //Test animation
; 524  :                 int VWaveOffset = (int)( sinf((float)XOffset*2 / 100) * 150 );    
; 525  :                 int HWaveOffset = (int)( cosf((float)XOffset / 100) * 150 );
; 526  :                 RenderRect(GlobalBackbuffer, 300 + VWaveOffset, 500 + HWaveOffset, 100, 100, RGB);
; 527  :                 */
; 528  :                 Vec3f ModVerts[8];

  00907	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??0?$Vec3@M@@QEAA@XZ ; Vec3<float>::Vec3<float>
  0090e	41 b8 08 00 00
	00		 mov	 r8d, 8
  00914	ba 0c 00 00 00	 mov	 edx, 12
  00919	48 8d 8c 24 60
	07 00 00	 lea	 rcx, QWORD PTR ModVerts$43[rsp]
  00921	e8 00 00 00 00	 call	 ??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 529  : 
; 530  :                 for(int i = 0; i < 8; i++)

  00926	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$2[rsp], 0
  00931	eb 10		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:
  00933	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR i$2[rsp]
  0093a	ff c0		 inc	 eax
  0093c	89 84 24 94 00
	00 00		 mov	 DWORD PTR i$2[rsp], eax
$LN8@WinMain:
  00943	83 bc 24 94 00
	00 00 08	 cmp	 DWORD PTR i$2[rsp], 8
  0094b	0f 8d 9f 00 00
	00		 jge	 $LN7@WinMain

; 531  :                 {
; 532  :                     Vec3f temp;

  00951	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR temp$21[rsp]
  00959	e8 00 00 00 00	 call	 ??0?$Vec3@M@@QEAA@XZ	; Vec3<float>::Vec3<float>

; 533  :                     RotMatrix.MultPointMatrix(Verts[i], temp);

  0095e	48 63 84 24 94
	00 00 00	 movsxd	 rax, DWORD PTR i$2[rsp]
  00966	48 6b c0 0c	 imul	 rax, rax, 12
  0096a	48 8d 84 04 00
	07 00 00	 lea	 rax, QWORD PTR Verts$42[rsp+rax]
  00972	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR temp$21[rsp]
  0097a	48 8b d0	 mov	 rdx, rax
  0097d	48 8d 8c 24 70
	05 00 00	 lea	 rcx, QWORD PTR RotMatrix$37[rsp]
  00985	e8 00 00 00 00	 call	 ??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z ; Matrix44<float>::MultPointMatrix<float>

; 534  :                     Verts[i] = temp;

  0098a	48 63 84 24 94
	00 00 00	 movsxd	 rax, DWORD PTR i$2[rsp]
  00992	48 6b c0 0c	 imul	 rax, rax, 12
  00996	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR temp$21[rsp]
  0099e	48 8d bc 04 00
	07 00 00	 lea	 rdi, QWORD PTR Verts$42[rsp+rax]
  009a6	48 8b f1	 mov	 rsi, rcx
  009a9	b9 0c 00 00 00	 mov	 ecx, 12
  009ae	f3 a4		 rep movsb

; 535  :                     TranslMatrix.MultPointMatrix(Verts[i], ModVerts[i]);   

  009b0	48 63 84 24 94
	00 00 00	 movsxd	 rax, DWORD PTR i$2[rsp]
  009b8	48 6b c0 0c	 imul	 rax, rax, 12
  009bc	48 8d 84 04 60
	07 00 00	 lea	 rax, QWORD PTR ModVerts$43[rsp+rax]
  009c4	48 63 8c 24 94
	00 00 00	 movsxd	 rcx, DWORD PTR i$2[rsp]
  009cc	48 6b c9 0c	 imul	 rcx, rcx, 12
  009d0	48 8d 8c 0c 00
	07 00 00	 lea	 rcx, QWORD PTR Verts$42[rsp+rcx]
  009d8	4c 8b c0	 mov	 r8, rax
  009db	48 8b d1	 mov	 rdx, rcx
  009de	48 8d 8c 24 b0
	05 00 00	 lea	 rcx, QWORD PTR TranslMatrix$38[rsp]
  009e6	e8 00 00 00 00	 call	 ??$MultPointMatrix@M@?$Matrix44@M@@QEAAXAEAV?$Vec3@M@@0@Z ; Matrix44<float>::MultPointMatrix<float>

; 536  :                 }

  009eb	e9 43 ff ff ff	 jmp	 $LN6@WinMain
$LN7@WinMain:

; 537  : 
; 538  : 
; 539  :                 for(int i = 0; i < NumTris; i++)

  009f0	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$3[rsp], 0
  009fb	eb 10		 jmp	 SHORT $LN11@WinMain
$LN9@WinMain:
  009fd	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR i$3[rsp]
  00a04	ff c0		 inc	 eax
  00a06	89 84 24 98 00
	00 00		 mov	 DWORD PTR i$3[rsp], eax
$LN11@WinMain:
  00a0d	83 bc 24 98 00
	00 00 0c	 cmp	 DWORD PTR i$3[rsp], 12
  00a15	0f 8d 64 02 00
	00		 jge	 $LN10@WinMain

; 540  :                 {
; 541  :                     
; 542  :                     Vec3f v0 = ModVerts[Tris[i * 3]];;

  00a1b	6b 84 24 98 00
	00 00 03	 imul	 eax, DWORD PTR i$3[rsp], 3
  00a23	48 98		 cdqe
  00a25	8b 84 84 70 06
	00 00		 mov	 eax, DWORD PTR Tris$41[rsp+rax*4]
  00a2c	48 6b c0 0c	 imul	 rax, rax, 12
  00a30	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR v0$22[rsp]
  00a38	48 8b f9	 mov	 rdi, rcx
  00a3b	48 8d b4 04 60
	07 00 00	 lea	 rsi, QWORD PTR ModVerts$43[rsp+rax]
  00a43	b9 0c 00 00 00	 mov	 ecx, 12
  00a48	f3 a4		 rep movsb

; 543  :                     Vec3f v1 = ModVerts[Tris[i * 3 + 1]];;

  00a4a	6b 84 24 98 00
	00 00 03	 imul	 eax, DWORD PTR i$3[rsp], 3
  00a52	ff c0		 inc	 eax
  00a54	48 98		 cdqe
  00a56	8b 84 84 70 06
	00 00		 mov	 eax, DWORD PTR Tris$41[rsp+rax*4]
  00a5d	48 6b c0 0c	 imul	 rax, rax, 12
  00a61	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR v1$23[rsp]
  00a69	48 8b f9	 mov	 rdi, rcx
  00a6c	48 8d b4 04 60
	07 00 00	 lea	 rsi, QWORD PTR ModVerts$43[rsp+rax]
  00a74	b9 0c 00 00 00	 mov	 ecx, 12
  00a79	f3 a4		 rep movsb

; 544  :                     Vec3f v2 = ModVerts[Tris[i * 3 + 2]];;

  00a7b	6b 84 24 98 00
	00 00 03	 imul	 eax, DWORD PTR i$3[rsp], 3
  00a83	83 c0 02	 add	 eax, 2
  00a86	48 98		 cdqe
  00a88	8b 84 84 70 06
	00 00		 mov	 eax, DWORD PTR Tris$41[rsp+rax*4]
  00a8f	48 6b c0 0c	 imul	 rax, rax, 12
  00a93	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR v2$24[rsp]
  00a9b	48 8b f9	 mov	 rdi, rcx
  00a9e	48 8d b4 04 60
	07 00 00	 lea	 rsi, QWORD PTR ModVerts$43[rsp+rax]
  00aa6	b9 0c 00 00 00	 mov	 ecx, 12
  00aab	f3 a4		 rep movsb

; 545  : 
; 546  : 
; 547  :                     int Width = GlobalBackbuffer.Width;

  00aad	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+56
  00ab3	89 84 24 a4 00
	00 00		 mov	 DWORD PTR Width$6[rsp], eax

; 548  :                     int Height = GlobalBackbuffer.Height;

  00aba	8b 05 3c 00 00
	00		 mov	 eax, DWORD PTR ?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A+60
  00ac0	89 84 24 a0 00
	00 00		 mov	 DWORD PTR Height$5[rsp], eax

; 549  :                     Vec2i p0 = ProjectPoint(WorldToCamera, v0, Camera, Width, Height);

  00ac7	48 8d 84 24 70
	03 00 00	 lea	 rax, QWORD PTR $T31[rsp]
  00acf	48 8d 8c 24 90
	04 00 00	 lea	 rcx, QWORD PTR Camera$34[rsp]
  00ad7	48 8b f8	 mov	 rdi, rax
  00ada	48 8b f1	 mov	 rsi, rcx
  00add	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00ae2	f3 a4		 rep movsb
  00ae4	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR Height$5[rsp]
  00aeb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00aef	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR Width$6[rsp]
  00af6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00afa	4c 8d 8c 24 70
	03 00 00	 lea	 r9, QWORD PTR $T31[rsp]
  00b02	4c 8d 84 24 30
	01 00 00	 lea	 r8, QWORD PTR v0$22[rsp]
  00b0a	48 8d 94 24 f0
	04 00 00	 lea	 rdx, QWORD PTR WorldToCamera$35[rsp]
  00b12	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR p0$9[rsp]
  00b1a	e8 00 00 00 00	 call	 ?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z ; ProjectPoint

; 550  :                     Vec2i p1 = ProjectPoint(WorldToCamera, v1, Camera, Width, Height);

  00b1f	48 8d 84 24 d0
	03 00 00	 lea	 rax, QWORD PTR $T32[rsp]
  00b27	48 8d 8c 24 90
	04 00 00	 lea	 rcx, QWORD PTR Camera$34[rsp]
  00b2f	48 8b f8	 mov	 rdi, rax
  00b32	48 8b f1	 mov	 rsi, rcx
  00b35	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00b3a	f3 a4		 rep movsb
  00b3c	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR Height$5[rsp]
  00b43	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00b47	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR Width$6[rsp]
  00b4e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00b52	4c 8d 8c 24 d0
	03 00 00	 lea	 r9, QWORD PTR $T32[rsp]
  00b5a	4c 8d 84 24 40
	01 00 00	 lea	 r8, QWORD PTR v1$23[rsp]
  00b62	48 8d 94 24 f0
	04 00 00	 lea	 rdx, QWORD PTR WorldToCamera$35[rsp]
  00b6a	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR p1$8[rsp]
  00b72	e8 00 00 00 00	 call	 ?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z ; ProjectPoint

; 551  :                     Vec2i p2 = ProjectPoint(WorldToCamera, v2, Camera, Width, Height);

  00b77	48 8d 84 24 30
	04 00 00	 lea	 rax, QWORD PTR $T33[rsp]
  00b7f	48 8d 8c 24 90
	04 00 00	 lea	 rcx, QWORD PTR Camera$34[rsp]
  00b87	48 8b f8	 mov	 rdi, rax
  00b8a	48 8b f1	 mov	 rsi, rcx
  00b8d	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00b92	f3 a4		 rep movsb
  00b94	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR Height$5[rsp]
  00b9b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00b9f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR Width$6[rsp]
  00ba6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00baa	4c 8d 8c 24 30
	04 00 00	 lea	 r9, QWORD PTR $T33[rsp]
  00bb2	4c 8d 84 24 50
	01 00 00	 lea	 r8, QWORD PTR v2$24[rsp]
  00bba	48 8d 94 24 f0
	04 00 00	 lea	 rdx, QWORD PTR WorldToCamera$35[rsp]
  00bc2	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR p2$10[rsp]
  00bca	e8 00 00 00 00	 call	 ?ProjectPoint@@YA?AV?$Vec2@H@@AEAV?$Matrix44@M@@AEAV?$Vec3@M@@Urender_camera@@HH@Z ; ProjectPoint

; 552  : 
; 553  :                     RenderLine(GlobalBackbuffer, p0, p1);

  00bcf	48 8d 84 24 30
	02 00 00	 lea	 rax, QWORD PTR $T27[rsp]
  00bd7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A ; GlobalBackbuffer
  00bde	48 8b f8	 mov	 rdi, rax
  00be1	48 8b f1	 mov	 rsi, rcx
  00be4	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00be9	f3 a4		 rep movsb
  00beb	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR p1$8[rsp]
  00bf3	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR p0$9[rsp]
  00bfb	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR $T27[rsp]
  00c03	e8 00 00 00 00	 call	 ?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z ; RenderLine

; 554  :                     RenderLine(GlobalBackbuffer, p1, p2);

  00c08	48 8d 84 24 80
	02 00 00	 lea	 rax, QWORD PTR $T28[rsp]
  00c10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A ; GlobalBackbuffer
  00c17	48 8b f8	 mov	 rdi, rax
  00c1a	48 8b f1	 mov	 rsi, rcx
  00c1d	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00c22	f3 a4		 rep movsb
  00c24	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR p2$10[rsp]
  00c2c	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR p1$8[rsp]
  00c34	48 8d 8c 24 80
	02 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  00c3c	e8 00 00 00 00	 call	 ?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z ; RenderLine

; 555  :                     RenderLine(GlobalBackbuffer, p2, p0);

  00c41	48 8d 84 24 d0
	02 00 00	 lea	 rax, QWORD PTR $T29[rsp]
  00c49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A ; GlobalBackbuffer
  00c50	48 8b f8	 mov	 rdi, rax
  00c53	48 8b f1	 mov	 rsi, rcx
  00c56	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00c5b	f3 a4		 rep movsb
  00c5d	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR p0$9[rsp]
  00c65	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR p2$10[rsp]
  00c6d	48 8d 8c 24 d0
	02 00 00	 lea	 rcx, QWORD PTR $T29[rsp]
  00c75	e8 00 00 00 00	 call	 ?RenderLine@@YAXUwin32_offscreen_buffer@@V?$Vec2@H@@1@Z ; RenderLine

; 556  :                 }

  00c7a	e9 7e fd ff ff	 jmp	 $LN9@WinMain
$LN10@WinMain:

; 557  : 
; 558  :                 HDC DeviceContext = GetDC(Window);

  00c7f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR Window$7[rsp]
  00c87	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00c8d	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR DeviceContext$12[rsp], rax

; 559  : 
; 560  :                 win32_window_dimension Dimension = Win32GetWindowDimension(Window);

  00c95	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR Window$7[rsp]
  00c9d	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  00ca2	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR $T20[rsp], rax
  00caa	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR $T20[rsp]
  00cb2	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR Dimension$11[rsp], rax

; 561  : 
; 562  :                 Win32DisplayBufferInWindow(DeviceContext, Dimension.Width, Dimension.Height, 

  00cba	48 8d 84 24 20
	03 00 00	 lea	 rax, QWORD PTR $T30[rsp]
  00cc2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A ; GlobalBackbuffer
  00cc9	48 8b f8	 mov	 rdi, rax
  00ccc	48 8b f1	 mov	 rsi, rcx
  00ccf	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00cd4	f3 a4		 rep movsb
  00cd6	4c 8d 8c 24 20
	03 00 00	 lea	 r9, QWORD PTR $T30[rsp]
  00cde	44 8b 84 24 e4
	00 00 00	 mov	 r8d, DWORD PTR Dimension$11[rsp+4]
  00ce6	8b 94 24 e0 00
	00 00		 mov	 edx, DWORD PTR Dimension$11[rsp]
  00ced	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$12[rsp]
  00cf5	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@@Z ; Win32DisplayBufferInWindow

; 563  :                                             GlobalBackbuffer);
; 564  :                 ReleaseDC(Window, DeviceContext);

  00cfa	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$12[rsp]
  00d02	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR Window$7[rsp]
  00d0a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 565  :                 
; 566  :             }

  00d10	e9 69 fb ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN14@WinMain:
$LN12@WinMain:

; 567  :         }
; 568  :         else
; 569  :         {
; 570  :             //TODO: Logging
; 571  :         }
; 572  :     }
; 573  :     else
; 574  :     {
; 575  :         //TODO: Logging
; 576  :     }
; 577  : 
; 578  :     return(0);

  00d15	33 c0		 xor	 eax, eax

; 579  : }

  00d17	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00d1f	48 33 cc	 xor	 rcx, rsp
  00d22	e8 00 00 00 00	 call	 __security_check_cookie
  00d27	48 81 c4 d8 07
	00 00		 add	 rsp, 2008		; 000007d8H
  00d2e	5f		 pop	 rdi
  00d2f	5e		 pop	 rsi
  00d30	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\cstdlib
;	COMDAT ?abs@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 48
?abs@@YAMM@Z PROC					; abs, COMDAT

; 27   : _NODISCARD _Check_return_ inline float abs(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 28   :     return _CSTD fabsf(_Xx);

  0000a	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR _Xx$[rsp]
  00010	e8 00 00 00 00	 call	 fabsf

; 29   : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
?abs@@YAMM@Z ENDP					; abs
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT fabsf
_TEXT	SEGMENT
_X$ = 48
fabsf	PROC						; COMDAT

; 669  :         {

$LN3:
  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 670  :             return (float)fabs(_X);

  0000a	f3 0f 5a 44 24
	30		 cvtss2sd xmm0, DWORD PTR _X$[rsp]
  00010	e8 00 00 00 00	 call	 fabs
  00015	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 671  :         }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@vector:
  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR __n$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR tv66[rsp], rax
  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR __n$[rsp]
  00027	48 ff c8	 dec	 rax
  0002a	48 89 44 24 50	 mov	 QWORD PTR __n$[rsp], rax
  0002f	48 83 7c 24 20
	00		 cmp	 QWORD PTR tv66[rsp], 0
  00035	76 20		 jbe	 SHORT $LN3@vector
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __t$[rsp]
  0003c	ff 54 24 58	 call	 QWORD PTR __f$[rsp]
  00040	48 8b 44 24 48	 mov	 rax, QWORD PTR __s$[rsp]
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __t$[rsp]
  0004a	48 03 c8	 add	 rcx, rax
  0004d	48 8b c1	 mov	 rax, rcx
  00050	48 89 44 24 40	 mov	 QWORD PTR __t$[rsp], rax
  00055	eb c1		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
